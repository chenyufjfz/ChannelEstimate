#include "Header.h"
#include <math.h>
#define Max(x,y) ((x) >(y) ? (x) :(y))

const short Sinc_Table_Tx01[840] =
{
	16384, 16383, 16382, 16381, 16379, 16376, 16374, 16370, 16367, 16363, 16358,
	16353, 16348, 16342, 16336, 16330, 16323, 16315, 16307, 16299, 16290, 16281,
	16272, 16262, 16252, 16241, 16230, 16218, 16206, 16193, 16181, 16167, 16154,
	16140, 16125, 16110, 16095, 16079, 16063, 16046, 16029, 16012, 15994, 15976,
	15957, 15938, 15919, 15899, 15879, 15858, 15837, 15816, 15794, 15772, 15749,
	15726, 15702, 15679, 15654, 15630, 15605, 15579, 15554, 15528, 15501, 15474,
	15447, 15419, 15391, 15363, 15334, 15305, 15275, 15245, 15215, 15184, 15153,
	15122, 15090, 15058, 15025, 14992, 14959, 14926, 14892, 14857, 14823, 14788,
	14752, 14717, 14681, 14644, 14607, 14570, 14533, 14495, 14457, 14419, 14380,
	14341, 14301, 14261, 14221, 14181, 14140, 14099, 14058, 14016, 13974, 13932,
	13889, 13846, 13803, 13759, 13715, 13671, 13627, 13582, 13537, 13492, 13446,
	13400, 13354, 13307, 13261, 13214, 13166, 13119, 13071, 13022, 12974, 12925,
	12876, 12827, 12778, 12728, 12678, 12628, 12577, 12526, 12475, 12424, 12372,
	12321, 12269, 12217, 12164, 12111, 12058, 12005, 11952, 11898, 11845, 11791,
	11736, 11682, 11627, 11572, 11517, 11462, 11407, 11351, 11295, 11239, 11183,
	11126, 11070, 11013, 10956, 10899, 10841, 10784, 10726, 10668, 10610, 10552,
	10494, 10435, 10377, 10318, 10259, 10200, 10141, 10081, 10022, 9962, 9903,
	9843, 9783, 9722, 9662, 9602, 9541, 9481, 9420, 9359, 9298, 9237, 9176,
	9115, 9053, 8992, 8930, 8869, 8807, 8745, 8683, 8621, 8559, 8497, 8435,
	8373, 8310, 8248, 8186, 8123, 8061, 7998, 7935, 7873, 7810, 7747, 7685,
	7622, 7559, 7496, 7433, 7370, 7307, 7244, 7181, 7118, 7055, 6992, 6929,
	6866, 6803, 6740, 6677, 6614, 6551, 6488, 6425, 6362, 6299, 6236, 6173,
	6110, 6048, 5985, 5922, 5859, 5797, 5734, 5671, 5609, 5546, 5484, 5422,
	5359, 5297, 5235, 5173, 5111, 5049, 4987, 4925, 4863, 4802, 4740, 4679,
	4617, 4556, 4495, 4433, 4372, 4312, 4251, 4190, 4129, 4069, 4009, 3948,
	3888, 3828, 3768, 3708, 3649, 3589, 3530, 3471, 3412, 3353, 3294, 3235,
	3177, 3118, 3060, 3002, 2944, 2886, 2828, 2771, 2714, 2657, 2600, 2543,
	2486, 2430, 2373, 2317, 2261, 2206, 2150, 2095, 2040, 1985, 1930, 1875,
	1821, 1767, 1713, 1659, 1605, 1552, 1499, 1446, 1393, 1340, 1288, 1236,
	1184, 1132, 1081, 1030, 979, 928, 877, 827, 777, 727, 677, 628, 579, 530,
	481, 433, 384, 337, 289, 241, 194, 147, 101, 54, 8, -38, -84, -129, -174,
	-219, -264, -308, -352, -396, -439, -483, -526, -568, -611, -653, -695,
	-736, -778, -819, -860, -900, -940, -980, -1020, -1059, -1098, -1137, -1175,
	-1214, -1251, -1289, -1326, -1363, -1400, -1436, -1473, -1508, -1544, -1579,
	-1614, -1649, -1683, -1717, -1751, -1784, -1817, -1850, -1883, -1915, -1947,
	-1978, -2009, -2040, -2071, -2101, -2131, -2161, -2191, -2220, -2248, -2277,
	-2305, -2333, -2360, -2388, -2414, -2441, -2467, -2493, -2519, -2544, -2569,
	-2594, -2618, -2642, -2666, -2690, -2713, -2735, -2758, -2780, -2802, -2823,
	-2845, -2866, -2886, -2906, -2926, -2946, -2965, -2984, -3003, -3021, -3039,
	-3057, -3074, -3092, -3108, -3125, -3141, -3157, -3172, -3187, -3202, -3217,
	-3231, -3245, -3259, -3272, -3285, -3298, -3310, -3322, -3334, -3346, -3357,
	-3368, -3378, -3388, -3398, -3408, -3417, -3426, -3435, -3443, -3452, -3459,
	-3467, -3474, -3481, -3488, -3494, -3500, -3506, -3511, -3516, -3521, -3526,
	-3530, -3534, -3537, -3541, -3544, -3547, -3549, -3551, -3553, -3555, -3556,
	-3558, -3558, -3559, -3559, -3559, -3559, -3558, -3557, -3556, -3555, -3553,
	-3551, -3549, -3547, -3544, -3541, -3538, -3534, -3530, -3526, -3522, -3517,
	-3513, -3508, -3502, -3497, -3491, -3485, -3478, -3472, -3465, -3458, -3451,
	-3443, -3435, -3427, -3419, -3411, -3402, -3393, -3384, -3374, -3365, -3355,
	-3345, -3334, -3324, -3313, -3302, -3291, -3280, -3268, -3256, -3244, -3232,
	-3219, -3207, -3194, -3181, -3168, -3154, -3140, -3127, -3112, -3098, -3084,
	-3069, -3054, -3039, -3024, -3009, -2993, -2977, -2962, -2945, -2929, -2913,
	-2896, -2879, -2863, -2845, -2828, -2811, -2793, -2775, -2758, -2740, -2721,
	-2703, -2684, -2666, -2647, -2628, -2609, -2590, -2570, -2551, -2531, -2512,
	-2492, -2472, -2452, -2431, -2411, -2391, -2370, -2349, -2328, -2307, -2286,
	-2265, -2244, -2222, -2201, -2179, -2158, -2136, -2114, -2092, -2070, -2048,
	-2025, -2003, -1981, -1958, -1936, -1913, -1890, -1867, -1844, -1821, -1798,
	-1775, -1752, -1729, -1706, -1682, -1659, -1635, -1612, -1588, -1565, -1541,
	-1517, -1494, -1470, -1446, -1422, -1398, -1374, -1350, -1326, -1302, -1278,
	-1254, -1230, -1206, -1181, -1157, -1133, -1109, -1084, -1060, -1036, -1012,
	-987, -963, -939, -915, -890, -866, -842, -817, -793, -769, -745, -720, -696,
	-672, -648, -624, -599, -575, -551, -527, -503, -479, -455, -431, -407,
	-383, -360, -336, -312, -288, -265, -241, -218, -194, -171, -147, -124,
	-101, -77, -54, -31, -8, 15, 38, 61, 84, 106, 129, 151, 174, 196, 219, 241,
	263, 285, 307, 329, 351, 373, 395, 416, 438, 459, 480, 502, 523, 544, 565,
	585, 606, 627, 647, 668, 688, 708, 728, 748, 768, 788, 807, 827, 846, 866,
	885, 904, 923, 942, 960, 979, 997, 1016, 1034, 1052, 1070, 1088, 1105, 1123,
	1140, 1157, 1175, 1192, 1208, 1225, 1242, 1258, 1274, 1291, 1307, 1322,
	1338, 1354, 1369, 1385, 1400, 1415, 1430, 1444, 1459, 1473, 1487, 1502,
	1516, 1529, 1543, 1556, 1570, 1583, 1596, 1609, 1622, 1634, 1647, 1659,
	1671, 1683, 1694, 1706, 1718, 1729, 1740, 1751, 1762, 1772, 1783, 1793,
	1803, 1813, 1823, 1833, 1842, 1851, 1860, 1869, 1878, 1887, 1895, 1904,
	1912, 1920, 1927, 1935, 1943, 1950, 1957, 1964, 1971, 1977, 1984, 1990,
	1996
};

const short Sinc_Table_Tx02[840] =
{
	16384, 16384, 16384, 16383, 16383, 16382, 16381, 16381, 16380, 16379, 16378,
	16376, 16375, 16374, 16372, 16370, 16369, 16367, 16365, 16363, 16361, 16358,
	16356, 16353, 16351, 16348, 16345, 16342, 16339, 16336, 16333, 16330, 16326,
	16323, 16319, 16315, 16311, 16307, 16303, 16299, 16295, 16290, 16286, 16281,
	16277, 16272, 16267, 16262, 16257, 16252, 16246, 16241, 16235, 16230, 16224,
	16218, 16212, 16206, 16200, 16193, 16187, 16181, 16174, 16167, 16161, 16154,
	16147, 16140, 16132, 16125, 16118, 16110, 16102, 16095, 16087, 16079, 16071,
	16063, 16055, 16046, 16038, 16029, 16021, 16012, 16003, 15994, 15985, 15976,
	15967, 15957, 15948, 15938, 15928, 15919, 15909, 15899, 15889, 15879, 15868,
	15858, 15848, 15837, 15826, 15816, 15805, 15794, 15783, 15772, 15760, 15749,
	15737, 15726, 15714, 15702, 15691, 15679, 15667, 15654, 15642, 15630, 15617,
	15605, 15592, 15579, 15567, 15554, 15541, 15528, 15514, 15501, 15488, 15474,
	15461, 15447, 15433, 15419, 15405, 15391, 15377, 15363, 15348, 15334, 15319,
	15305, 15290, 15275, 15260, 15245, 15230, 15215, 15200, 15184, 15169, 15153,
	15137, 15122, 15106, 15090, 15074, 15058, 15042, 15025, 15009, 14992, 14976,
	14959, 14942, 14926, 14909, 14892, 14875, 14857, 14840, 14823, 14805, 14788,
	14770, 14752, 14735, 14717, 14699, 14681, 14662, 14644, 14626, 14607, 14589,
	14570, 14552, 14533, 14514, 14495, 14476, 14457, 14438, 14419, 14399, 14380,
	14360, 14341, 14321, 14301, 14281, 14261, 14241, 14221, 14201, 14181, 14161,
	14140, 14120, 14099, 14079, 14058, 14037, 14016, 13995, 13974, 13953, 13932,
	13910, 13889, 13868, 13846, 13825, 13803, 13781, 13759, 13737, 13715, 13693,
	13671, 13649, 13627, 13604, 13582, 13560, 13537, 13514, 13492, 13469, 13446,
	13423, 13400, 13377, 13354, 13331, 13307, 13284, 13261, 13237, 13214, 13190,
	13166, 13142, 13119, 13095, 13071, 13047, 13022, 12998, 12974, 12950, 12925,
	12901, 12876, 12852, 12827, 12802, 12778, 12753, 12728, 12703, 12678, 12653,
	12628, 12602, 12577, 12552, 12526, 12501, 12475, 12450, 12424, 12398, 12372,
	12347, 12321, 12295, 12269, 12243, 12217, 12190, 12164, 12138, 12111, 12085,
	12058, 12032, 12005, 11979, 11952, 11925, 11898, 11872, 11845, 11818, 11791,
	11763, 11736, 11709, 11682, 11655, 11627, 11600, 11572, 11545, 11517, 11490,
	11462, 11434, 11407, 11379, 11351, 11323, 11295, 11267, 11239, 11211, 11183,
	11155, 11126, 11098, 11070, 11041, 11013, 10984, 10956, 10927, 10899, 10870,
	10841, 10813, 10784, 10755, 10726, 10697, 10668, 10639, 10610, 10581, 10552,
	10523, 10494, 10465, 10435, 10406, 10377, 10347, 10318, 10289, 10259, 10230,
	10200, 10170, 10141, 10111, 10081, 10052, 10022, 9992, 9962, 9932, 9903,
	9873, 9843, 9813, 9783, 9753, 9722, 9692, 9662, 9632, 9602, 9572, 9541,
	9511, 9481, 9450, 9420, 9390, 9359, 9329, 9298, 9268, 9237, 9206, 9176,
	9145, 9115, 9084, 9053, 9023, 8992, 8961, 8930, 8899, 8869, 8838, 8807,
	8776, 8745, 8714, 8683, 8652, 8621, 8590, 8559, 8528, 8497, 8466, 8435,
	8404, 8373, 8342, 8310, 8279, 8248, 8217, 8186, 8154, 8123, 8092, 8061,
	8029, 7998, 7967, 7935, 7904, 7873, 7841, 7810, 7779, 7747, 7716, 7685,
	7653, 7622, 7590, 7559, 7527, 7496, 7465, 7433, 7402, 7370, 7339, 7307,
	7276, 7244, 7213, 7181, 7150, 7118, 7087, 7055, 7024, 6992, 6961, 6929,
	6898, 6866, 6835, 6803, 6772, 6740, 6709, 6677, 6645, 6614, 6582, 6551,
	6519, 6488, 6456, 6425, 6394, 6362, 6331, 6299, 6268, 6236, 6205, 6173,
	6142, 6110, 6079, 6048, 6016, 5985, 5953, 5922, 5891, 5859, 5828, 5797,
	5765, 5734, 5703, 5671, 5640, 5609, 5578, 5546, 5515, 5484, 5453, 5422,
	5390, 5359, 5328, 5297, 5266, 5235, 5204, 5173, 5142, 5111, 5080, 5049,
	5018, 4987, 4956, 4925, 4894, 4863, 4832, 4802, 4771, 4740, 4709, 4679,
	4648, 4617, 4586, 4556, 4525, 4495, 4464, 4433, 4403, 4372, 4342, 4312,
	4281, 4251, 4220, 4190, 4160, 4129, 4099, 4069, 4039, 4009, 3978, 3948,
	3918, 3888, 3858, 3828, 3798, 3768, 3738, 3708, 3679, 3649, 3619, 3589,
	3560, 3530, 3500, 3471, 3441, 3412, 3382, 3353, 3323, 3294, 3264, 3235,
	3206, 3177, 3147, 3118, 3089, 3060, 3031, 3002, 2973, 2944, 2915, 2886,
	2857, 2828, 2800, 2771, 2742, 2714, 2685, 2657, 2628, 2600, 2571, 2543,
	2514, 2486, 2458, 2430, 2402, 2373, 2345, 2317, 2289, 2261, 2234, 2206,
	2178, 2150, 2122, 2095, 2067, 2040, 2012, 1985, 1957, 1930, 1903, 1875,
	1848, 1821, 1794, 1767, 1740, 1713, 1686, 1659, 1632, 1605, 1578, 1552,
	1525, 1499, 1472, 1446, 1419, 1393, 1367, 1340, 1314, 1288, 1262, 1236,
	1210, 1184, 1158, 1132, 1107, 1081, 1055, 1030, 1004, 979, 953, 928, 902,
	877, 852, 827, 802, 777, 752, 727, 702, 677, 653, 628, 603, 579, 554, 530,
	505, 481, 457, 433, 409, 384, 360, 337, 313, 289, 265, 241, 218, 194, 171,
	147, 124, 101, 77, 54, 31, 8, -15, -38, -61, -84, -106, -129, -152, -174,
	-197, -219, -241, -264, -286, -308, -330, -352, -374, -396, -418, -439, -461,
	-483, -504, -526, -547, -568, -590, -611, -632, -653, -674, -695, -716,
	-736, -757, -778, -798, -819, -839, -860, -880, -900, -920, -940, -960, -980,
	-1000, -1020, -1039, -1059, -1079, -1098, -1118, -1137, -1156, -1175, -1194,
	-1214, -1233, -1251, -1270, -1289, -1308, -1326, -1345, -1363, -1382, -1400,
	-1418, -1436, -1455, -1473, -1491, -1508, -1526, -1544, -1562, -1579, -1597,
	-1614, -1631, -1649, -1666, -1683, -1700, -1717, -1734, -1751, -1767, -1784,
	-1801, -1817, -1834, -1850, -1866, -1883, -1899, -1915, -1931, -1947, -1962,
	-1978, -1994, -2009, -2025, -2040, -2056, -2071, -2086, -2101, -2116, -2131,
	-2146, -2161, -2176, -2191, -2205, -2220, -2234, -2248, -2263, -2277, -2291,
	-2305, -2319, -2333, -2347, -2360
};

const short Sinc_Table_Tx03[840] =
{
	16384, 16383, 16382, 16381, 16380, 16378, 16375, 16373, 16370, 16366, 16363,
	16359, 16354, 16349, 16344, 16339, 16333, 16327, 16320, 16313, 16306, 16298,
	16290, 16282, 16274, 16265, 16255, 16246, 16235, 16225, 16214, 16203, 16192,
	16180, 16168, 16155, 16143, 16129, 16116, 16102, 16088, 16073, 16058, 16043,
	16028, 16012, 15996, 15979, 15962, 15945, 15927, 15909, 15891, 15872, 15853,
	15834, 15815, 15795, 15774, 15754, 15733, 15712, 15690, 15668, 15646, 15623,
	15600, 15577, 15554, 15530, 15506, 15481, 15456, 15431, 15406, 15380, 15354,
	15328, 15301, 15274, 15246, 15219, 15191, 15163, 15134, 15105, 15076, 15047,
	15017, 14987, 14956, 14926, 14895, 14863, 14832, 14800, 14768, 14735, 14703,
	14670, 14636, 14603, 14569, 14535, 14500, 14465, 14430, 14395, 14359, 14324,
	14287, 14251, 14214, 14177, 14140, 14103, 14065, 14027, 13989, 13950, 13911,
	13872, 13833, 13793, 13754, 13714, 13673, 13633, 13592, 13551, 13509, 13468,
	13426, 13384, 13342, 13299, 13256, 13214, 13170, 13127, 13083, 13039, 12995,
	12951, 12906, 12861, 12816, 12771, 12726, 12680, 12634, 12588, 12542, 12495,
	12449, 12402, 12355, 12307, 12260, 12212, 12164, 12116, 12068, 12019, 11971,
	11922, 11873, 11823, 11774, 11725, 11675, 11625, 11575, 11525, 11474, 11423,
	11373, 11322, 11271, 11219, 11168, 11116, 11065, 11013, 10961, 10909, 10856,
	10804, 10751, 10699, 10646, 10593, 10540, 10486, 10433, 10379, 10326, 10272,
	10218, 10164, 10110, 10056, 10001, 9947, 9892, 9837, 9783, 9728, 9673, 9618,
	9562, 9507, 9452, 9396, 9341, 9285, 9229, 9173, 9117, 9061, 9005, 8949,
	8893, 8836, 8780, 8724, 8667, 8611, 8554, 8497, 8440, 8384, 8327, 8270,
	8213, 8156, 8099, 8042, 7985, 7927, 7870, 7813, 7756, 7698, 7641, 7583,
	7526, 7469, 7411, 7354, 7296, 7239, 7181, 7124, 7066, 7009, 6951, 6893,
	6836, 6778, 6721, 6663, 6606, 6548, 6491, 6433, 6376, 6318, 6261, 6203,
	6146, 6089, 6031, 5974, 5917, 5859, 5802, 5745, 5688, 5631, 5574, 5517,
	5460, 5403, 5346, 5289, 5232, 5175, 5119, 5062, 5006, 4949, 4893, 4836,
	4780, 4724, 4668, 4612, 4556, 4500, 4444, 4388, 4333, 4277, 4222, 4166,
	4111, 4056, 4001, 3946, 3891, 3836, 3781, 3727, 3672, 3618, 3563, 3509,
	3455, 3401, 3347, 3294, 3240, 3187, 3133, 3080, 3027, 2974, 2921, 2869,
	2816, 2764, 2711, 2659, 2607, 2555, 2503, 2452, 2400, 2349, 2298, 2247,
	2196, 2145, 2095, 2044, 1994, 1944, 1894, 1844, 1795, 1745, 1696, 1647,
	1598, 1550, 1501, 1453, 1404, 1356, 1308, 1261, 1213, 1166, 1119, 1072,
	1025, 979, 932, 886, 840, 794, 749, 703, 658, 613, 568, 523, 479, 435, 391,
	347, 303, 260, 217, 174, 131, 88, 46, 4, -38, -80, -121, -162, -203, -244,
	-285, -325, -365, -405, -445, -484, -524, -563, -602, -640, -678, -717, -754,
	-792, -829, -867, -904, -940, -977, -1013, -1049, -1085, -1120, -1155,
	-1190, -1225, -1260, -1294, -1328, -1362, -1395, -1429, -1462, -1494, -1527,
	-1559, -1591, -1623, -1655, -1686, -1717, -1748, -1778, -1809, -1839, -1868,
	-1898, -1927, -1956, -1985, -2013, -2042, -2070, -2097, -2125, -2152, -2179,
	-2206, -2232, -2258, -2284, -2310, -2335, -2360, -2385, -2410, -2434, -2458,
	-2482, -2506, -2529, -2552, -2575, -2597, -2619, -2641, -2663, -2684, -2706,
	-2727, -2747, -2768, -2788, -2808, -2827, -2846, -2866, -2884, -2903, -2921,
	-2939, -2957, -2974, -2992, -3009, -3025, -3042, -3058, -3074, -3089, -3105,
	-3120, -3135, -3149, -3164, -3178, -3191, -3205, -3218, -3231, -3244, -3256,
	-3269, -3281, -3292, -3304, -3315, -3326, -3337, -3347, -3357, -3367, -3377,
	-3386, -3395, -3404, -3413, -3421, -3429, -3437, -3445, -3452, -3459, -3466,
	-3473, -3479, -3485, -3491, -3497, -3502, -3507, -3512, -3517, -3521, -3525,
	-3529, -3533, -3536, -3540, -3542, -3545, -3548, -3550, -3552, -3554, -3555,
	-3556, -3557, -3558, -3559, -3559, -3559, -3559, -3559, -3558, -3557, -3556,
	-3555, -3553, -3552, -3550, -3548, -3545, -3543, -3540, -3537, -3534, -3530,
	-3526, -3522, -3518, -3514, -3509, -3505, -3500, -3494, -3489, -3483, -3478,
	-3472, -3465, -3459, -3452, -3446, -3439, -3431, -3424, -3416, -3408, -3400,
	-3392, -3384, -3375, -3366, -3357, -3348, -3339, -3329, -3320, -3310, -3300,
	-3290, -3279, -3269, -3258, -3247, -3236, -3224, -3213, -3201, -3189, -3177,
	-3165, -3153, -3140, -3128, -3115, -3102, -3089, -3076, -3062, -3048, -3035,
	-3021, -3007, -2993, -2978, -2964, -2949, -2934, -2919, -2904, -2889, -2874,
	-2858, -2842, -2827, -2811, -2795, -2779, -2762, -2746, -2729, -2713, -2696,
	-2679, -2662, -2645, -2627, -2610, -2592, -2575, -2557, -2539, -2521, -2503,
	-2485, -2467, -2448, -2430, -2411, -2392, -2373, -2355, -2336, -2316, -2297,
	-2278, -2259, -2239, -2220, -2200, -2180, -2160, -2141, -2121, -2101, -2080,
	-2060, -2040, -2020, -1999, -1979, -1958, -1938, -1917, -1896, -1875, -1854,
	-1833, -1812, -1791, -1770, -1749, -1728, -1707, -1685, -1664, -1643, -1621,
	-1600, -1578, -1556, -1535, -1513, -1491, -1470, -1448, -1426, -1404, -1382,
	-1361, -1339, -1317, -1295, -1273, -1251, -1229, -1207, -1184, -1162, -1140,
	-1118, -1096, -1074, -1052, -1030, -1007, -985, -963, -941, -919, -897,
	-874, -852, -830, -808, -786, -764, -741, -719, -697, -675, -653, -631, -609,
	-587, -565, -543, -521, -499, -477, -455, -433, -412, -390, -368, -346,
	-325, -303, -281, -260, -238, -217, -195, -174, -152, -131, -110, -88, -67,
	-46, -25, -4, 17, 38, 59, 80, 100, 121, 142, 162, 183, 203, 224, 244, 264,
	284, 304, 325, 345, 364, 384, 404, 424, 443, 463, 482, 502, 521, 540, 559,
	578, 597, 616, 635, 654, 672, 691, 709, 727, 746, 764, 782, 800, 818, 835,
	853, 871, 888, 906, 923, 940, 957, 974, 991, 1008, 1024, 1041, 1057, 1074,
	1090, 1106, 1122
};

short PdpSubFrame[FftLength] =
{
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

const short Wr[256] =
{
	16384, 16379, 16364, 16340, 16305, 16261, 16207, 16143, 16069,
	15986, 15893, 15791, 15679, 15557, 15426, 15286, 15137, 14978, 14811, 14635,
	14449, 14256, 14053, 13842, 13623, 13395, 13160, 12916, 12665, 12406, 12140,
	11866, 11585, 11297, 11003, 10702, 10394, 10080, 9760, 9434, 9102, 8765, 8423,
	8076, 7723, 7366, 7005, 6639, 6270, 5897, 5520, 5139, 4756, 4370, 3981, 3590,
	3196, 2801, 2404, 2006, 1606, 1205, 804, 402, 0, -402, -804, -1205, -1606, -2006,
	-2404, -2801, -3196, -3590, -3981, -4370, -4756, -5139, -5520, -5897, -6270,
	-6639, -7005, -7366, -7723, -8076, -8423, -8765, -9102, -9434, -9760, -10080,
	-10394, -10702, -11003, -11297, -11585, -11866, -12140, -12406, -12665,
	-12916, -13160, -13395, -13623, -13842, -14053, -14256, -14449, -14635,
	-14811, -14978, -15137, -15286, -15426, -15557, -15679, -15791, -15893,
	-15986, -16069, -16143, -16207, -16261, -16305, -16340, -16364, -16379,
	-16384, -16379, -16364, -16340, -16305, -16261, -16207, -16143, -16069,
	-15986, -15893, -15791, -15679, -15557, -15426, -15286, -15137, -14978,
	-14811, -14635, -14449, -14256, -14053, -13842, -13623, -13395, -13160,
	-12916, -12665, -12406, -12140, -11866, -11585, -11297, -11003, -10702,
	-10394, -10080, -9760, -9434, -9102, -8765, -8423, -8076, -7723, -7366,
	-7005, -6639, -6270, -5897, -5520, -5139, -4756, -4370, -3981, -3590, -3196,
	-2801, -2404, -2006, -1606, -1205, -804, -402, 0, 402, 804, 1205, 1606, 2006,
	2404, 2801, 3196, 3590, 3981, 4370, 4756, 5139, 5520, 5897, 6270, 6639, 7005,
	7366, 7723, 8076, 8423, 8765, 9102, 9434, 9760, 10080, 10394, 10702, 11003,
	11297, 11585, 11866, 12140, 12406, 12665, 12916, 13160, 13395, 13623, 13842,
	14053, 14256, 14449, 14635, 14811, 14978, 15137, 15286, 15426, 15557, 15679,
	15791, 15893, 15986, 16069, 16143, 16207, 16261, 16305, 16340, 16364, 16379
};

const short Wi[256] =
{
	0, -402, -804, -1205, -1606, -2006, -2404, -2801, -3196, -3590,
	-3981, -4370, -4756, -5139, -5520, -5897, -6270, -6639, -7005, -7366, -7723,
	-8076, -8423, -8765, -9102, -9434, -9760, -10080, -10394, -10702, -11003,
	-11297, -11585, -11866, -12140, -12406, -12665, -12916, -13160, -13395,
	-13623, -13842, -14053, -14256, -14449, -14635, -14811, -14978, -15137,
	-15286, -15426, -15557, -15679, -15791, -15893, -15986, -16069, -16143,
	-16207, -16261, -16305, -16340, -16364, -16379, -16384, -16379, -16364,
	-16340, -16305, -16261, -16207, -16143, -16069, -15986, -15893, -15791,
	-15679, -15557, -15426, -15286, -15137, -14978, -14811, -14635, -14449,
	-14256, -14053, -13842, -13623, -13395, -13160, -12916, -12665, -12406,
	-12140, -11866, -11585, -11297, -11003, -10702, -10394, -10080, -9760,
	-9434, -9102, -8765, -8423, -8076, -7723, -7366, -7005, -6639, -6270,
	-5897, -5520, -5139, -4756, -4370, -3981, -3590, -3196, -2801, -2404,
	-2006, -1606, -1205, -804, -402, 0, 402, 804, 1205, 1606, 2006, 2404, 2801,
	3196, 3590, 3981, 4370, 4756, 5139, 5520, 5897, 6270, 6639, 7005, 7366, 7723,
	8076, 8423, 8765, 9102, 9434, 9760, 10080, 10394, 10702, 11003, 11297, 11585,
	11866, 12140, 12406, 12665, 12916, 13160, 13395, 13623, 13842, 14053, 14256,
	14449, 14635, 14811, 14978, 15137, 15286, 15426, 15557, 15679, 15791, 15893,
	15986, 16069, 16143, 16207, 16261, 16305, 16340, 16364, 16379, 16384, 16379,
	16364, 16340, 16305, 16261, 16207, 16143, 16069, 15986, 15893, 15791, 15679,
	15557, 15426, 15286, 15137, 14978, 14811, 14635, 14449, 14256, 14053, 13842,
	13623, 13395, 13160, 12916, 12665, 12406, 12140, 11866, 11585, 11297, 11003,
	10702, 10394, 10080, 9760, 9434, 9102, 8765, 8423, 8076, 7723, 7366, 7005,
	6639, 6270, 5897, 5520, 5139, 4756, 4370, 3981, 3590, 3196, 2801, 2404, 2006,
	1606, 1205, 804, 402
};

void TcoefCalc(void)
{
		// MSE of TDI (output for FDI)
		// =MSEt*2^14

		long long Mu1, Mu2;
		// Positions of pilot used in inter- and extra-polation
		short Pin_t[Ntap_t];
		short Pex_t[Nex_t];

		int Vb[Ntap_t];

		short i,j,n,k;
		int Temp1;	
		 										// Table of sinc, 16-bit 
		
		// Correlations
		int Rt[(Ntap_t-1)*Ngap_t+1]; 			// Rt[0:12], -16384~16384
		
		int Psi_t[Ntap_t*Ntap_t]; 				// Ntap_t * Ntap_t
		
		// Inversions
		int Psi_t_Inv[Ntap_t*Ntap_t];				// Ntap_t * Ntap_t
		
		int Psi_t_InvEx[Nex_t*Nex_t]; 			// Nex_t * Nex_t
		 

		


		int S, Sinv; // Schur complement and its reciprocal
		

		// MSE
		short MSEp;
		const short *Sinc_Table_p=Sinc_Table_Tx01;		
		// Read Doppler Shift and Noise Variance in each subframe
		switch (TransMode) 
		{
			case 1:
				Sinc_Table_p = Sinc_Table_Tx01;
				break;
			case 2:
				Sinc_Table_p = Sinc_Table_Tx02;
				break;
			case 3:
				Sinc_Table_p = Sinc_Table_Tx03;
				break;
			default:
				break;
		}		
		
		//calculate position	
		for (i=0; i<Nex_t; i++) 
		{
			Pex_t[i] = (i+1)*Ngap_t; // 3,6,9,12
		}
		for (i=0; i<Ntap_t; i++) 
		{
			Pin_t[i] = (i-(Ntap_t-1)/2)*Ngap_t; // -6,-3,0,3,6
		}	
					
		Rt[0] = 16384;
		for (i=1; i<=(Ntap_t-1)*Ngap_t; i++) 
		{
			Rt[i] = Sinc_Table_p[DopplerSft*i-1];
		}

		for (i=0; i<Ntap_t; i++) 
		{
			for (j=0; j<Ntap_t; j++) 
			{
				Psi_t[j*Ntap_t+i] = Rt[abs(j-i)*Ngap_t];
			}
			// Diagonal element
			Psi_t[i*Ntap_t+i] += NoiseVar;
		}	
#if 0
		for (i = 0; i < Ntap_t; i++)
			for (j = 0; j < Ntap_t; j++)
				printf("Psi_t[%d] = %d\n", i*Ntap_t + j, Psi_t[i*Ntap_t + j]);
		printf("\n");
#endif
		// Inverse of auto-correlation
		// (Psi_t_Inv,Psi_t_InvEx) = inv_Toeplitz(Psi_t);
		{
			 Psi_t_Inv[0] = 268435456/Psi_t[0];
			//afe_cordic_div(Psi_t[0], 68719476736);
			for (k=1; k<Ntap_t; k++) 
			{
				// Compute Vb
				for (i=0; i<k; i++) 
				{
					Vb[i] = 0;
					for (j=0; j<k; j++) 
					{
						Mu1 = Psi_t_Inv[j*Ntap_t+i];
						Mu2 = Psi_t[k*Ntap_t+j];
						Vb[i] += (Mu1*Mu2)/16384; 
					}
				}
				// Compute Schur complement
				Temp1 = 0;
				for (i=0; i<k; i++) 
				{
					 Mu1 = Psi_t[i*Ntap_t+k];
					 Mu2 = Vb[i];
					 Temp1 += (Mu1 * Mu2)/16384;
				}
				S = Psi_t[k*Ntap_t+k] - Temp1; // also MSE
				// Reciprocal of Schur complement
				Sinv = 268435456/S;	
				// Update current result
				for (i=0; i<k; i++) 
				{
					for (j=0; j<k; j++) 
					{
						// Update current inverse
						Mu1 = Vb[i];
						Mu2 = Vb[j];
						Temp1 = (Mu1 * Mu2)/16384;
						Mu1 = Sinv;
						Mu2 = Temp1;
						Psi_t_Inv[j*Ntap_t+i] += (Mu1 * Mu2)/16384;
					}
					// Compute rest elements
					Mu1 = Sinv;
					Mu2 = Vb[i];
					Temp1 = (Mu1 * Mu2) / 16384;
					Psi_t_Inv[k*Ntap_t+i] = -Temp1;
					Psi_t_Inv[i*Ntap_t+k] = -Temp1;
				}
				// North-West element
				Psi_t_Inv[k*Ntap_t+k] = Sinv;
				// Output medium value of Psi_t_Inv for Extrapolation
				if (k==Nex_t-1) 
				{
					for (i=0; i<Nex_t; i++) 
					{
						for (j=0; j<Nex_t; j++) 
						{
							Psi_t_InvEx[j*Nex_t+i] = Psi_t_Inv[j*Ntap_t+i];
						}
					}
				}
			}
		} // Inverse is completed	
#if 0
		for (i = 0; i < Ntap_t; i++)
			for (j = 0; j < Ntap_t; j++)
				printf("Psi_t_Inv[%d] = %d\n", i*Ntap_t + j, Psi_t_Inv[i*Ntap_t + j]);
		printf("\n");
		for (i = 0; i<Nex_t; i++)
			for (j = 0; j<Nex_t; j++)
				printf("Psi_t_InvEx[%d] = %d\n", i*Ntap_t + j, Psi_t_InvEx[i*Ntap_t + j]);
			
		printf("\n");		
#endif
		// First compute the candidancy weights
		for (n=Ngap_t-1; n>-Ngap_t; n--) 
		{ 

			for (i=0; i<Ntap_t; i++) 
			{
				Temp1 = 0;
				for (j=0; j<Ntap_t; j++) 
				{
					Mu1 = Rt[abs(Pin_t[j]-n)];
					Mu2 = Psi_t_Inv[i*Ntap_t+j];
					Temp1 += (Mu1 * Mu2)/16384;
				}
				Winter_t[Ngap_t-1-n][i] = Temp1/32;
			}
		}
		// Weight of extrapolation filters
		// (R[3],  R[6],  R[9])
		for (i=0; i<Nex_t; i++) 
		{
			Temp1 = 0;
			for (j=0; j<Nex_t; j++) 
			{
				Mu1 = Rt[Pex_t[j]];
				Mu2 = Psi_t_InvEx[i*Nex_t+j];
				Temp1 += (Mu1 * Mu2)/16384;
			}
			Wex_t[i] = Temp1/32;
		}		
				
			
		// Compute the MSE of TDI
		// -6, -3,  0, 3, 6 -> (0)
		Temp1 = 0;
		for (i=0; i<Ntap_t; i++) 
		{
			Mu1 = Winter_t[Ngap_t-1][i];
			Mu2 = Rt[abs(Pin_t[i])];
			Temp1 += (Mu1 * Mu2) / 512;
		}	
		MSEp = (Rt[0] - Temp1);
		
		Mse_t =Max((int)(2*MSEp), 16);
}




void FcoefCalc(void) 
{
		//Mse_t=819;//for test
		short TmpI[Ntap_f*Ngap_f]; // Weight of FDI filter
		short TmpQ[Ntap_f*Ngap_f]; 

	
		// Positions of pilot used in inter- and extra-polation
	
		short i,j,n,k;
		short MSEp;
		short Length;
		int S, Sinv; // Schur complement and its reciprocal
		int TempI, TempQ, Temp; // temporary for complex computations
		long long Mu1, Mu2;
		int Temp1, Temp2;
		int Theta;
		short Pin_f[Ntap_f];
		short Pex_f[Nex_f];
		// Correlations
		int Rfr[(Ntap_f-1)*Ngap_f+1]; // Rf[0:40]
		int Rfi[(Ntap_f-1)*Ngap_f+1];
		int Psi_fr[Ntap_f*Ntap_f]; // Ntap_f * Ntap_f
		int Psi_fi[Ntap_f*Ntap_f];
		// Inversions  
		int Psi_f_Invr[Ntap_f*Ntap_f]; // Ntap_f * Ntap_f
		int Psi_f_Invi[Ntap_f*Ntap_f]; 
		int Psi_f_InvExr[Nex_f*Nex_f]; // Nex_f * Nex_f
		int Psi_f_InvExi[Nex_f*Nex_f]; 
		
		// MSE
		int Vbr[Ntap_f];
		int Vbi[Ntap_f];
		
		
		
		for (i=0; i<Nex_f; i++) 
		{
			Pex_f[i] = (i+1)*Ngap_f; // 4,8,12,16,20,24,28,32,36,40
		}
		for (i=0; i<Ntap_f; i++) 
		{
			Pin_f[i] = (i-(Ntap_f-1)/2)*Ngap_f; // -20,-16,-12,-8,-4,0,4,8,12,16,20
		}
		
		// Read Power Delay Profile and Noise Variance in each subframe

		// Auto-Correlation Function, Uniform spectrum
		// Rf(0):Rf(40), Rf(-i)=conj(Rf(i))
		for (i=0; i<=(Ntap_f-1)*Ngap_f; i++) 
		{
			TempI = 0;
			TempQ = 0;
			for (j=0; j<256; j++) 
			{ // tau
				// Use look-up table

				Theta = i*j;
				while (Theta >= 256) 
				{ // 2*PI/1024*(2**14)
					Theta -= 256; // 2*PI/1024*(2*14)
				}
				Temp = (PdpSubFrame[j] * Wr[Theta]) / 16384;
				TempI = TempI+Temp;

				Temp = (PdpSubFrame[j] * Wi[Theta]) / 16384;
				TempQ = TempQ+Temp;
			}
			Rfr[i] = TempI;
			Rfi[i] = TempQ;
		}

		for (i=0; i<Ntap_f; i++) 
		{
			for (j=0; j<Ntap_f; j++) 
			{
				if (j<i) 
				{
					Psi_fr[j*Ntap_f+i] = Rfr[(i-j)*Ngap_f];
					Psi_fi[j*Ntap_f+i] = -Rfi[(i-j)*Ngap_f];
				} 
				else 
				{
					Psi_fr[j*Ntap_f+i] = Rfr[(j-i)*Ngap_f];
					Psi_fi[j*Ntap_f+i] = Rfi[(j-i)*Ngap_f];
				}	
			}

			// Diagonal element
			Psi_fr[i*Ntap_f+i] += Mse_t;
		}	
#if 0
		for (i = 0; i < Ntap_f; i++)
			for (j = 0; j < Ntap_f; j++)
				printf("PSi_f[%d]= (%d,%d)\n", i*Ntap_f + j, Psi_fr[i*Ntap_f + j], Psi_fi[i*Ntap_f + j]);
		printf("\n");		
#endif
		// Inverse of auto-correlation
		// (Psi_f_Inv,Psi_f_InvEx) = inv_Toeplitz(Psi_f);
		{

			Psi_f_Invr[0] = 268435456/Psi_fr[0];		
			Psi_f_Invi[0] = 0;
	
			for (k=1; k<Ntap_f; k++) 
			{
				// Compute Vb
				for (i=0; i<k; i++) 
				{
					Vbr[i] = 0;
					Vbi[i] = 0;
					for (j=0; j<k; j++) 
					{

						Mu1 = Psi_f_Invr[j*Ntap_f+i];
						Mu2 = Psi_fr[k*Ntap_f+j];
						Temp1 = (Mu1*Mu2) / 16384;
						Mu1 = Psi_f_Invi[j*Ntap_f+i];
						Mu2 = Psi_fi[k*Ntap_f+j];
						Temp2 = (Mu1*Mu2) / 16384;
						Vbr[i] += (Temp1 - Temp2);
						
						Mu1 = Psi_f_Invr[j*Ntap_f+i];
						Mu2 = Psi_fi[k*Ntap_f+j];
						Temp1 = (Mu1*Mu2) / 16384;
						Mu1 = Psi_f_Invi[j*Ntap_f+i];
						Mu2 = Psi_fr[k*Ntap_f+j];
						Temp2 = (Mu1*Mu2) / 16384;
						Vbi[i] += (Temp1 + Temp2);
					}
				}	
				// Compute Schur complement
				TempI = 0;
				for (i=0; i<k; i++) 
				{
					// Psi_f(k,i)*Psi_f_Inv(i,j)*Psi_f(j,k)
					Mu1 = Psi_fr[i*Ntap_f+k];
					Mu2 = Vbr[i];
					Temp1 = (Mu1 * Mu2) / 16384;
					Mu1 = Psi_fi[i*Ntap_f+k];
					Mu2 = Vbi[i];
					Temp2 = (Mu1 * Mu2) / 16384;
					TempI += Temp1 - Temp2;
				}
				S = Psi_fr[k*Ntap_f+k]-TempI;

				// Reciprocal of Schur complement
				Sinv = 268435456/S;	
				// Update current result
				for (i=0; i<k; i++) 
				{
					for (j=0; j<k; j++) 
					{
						// Update current inverse, Vb[i]*conj(Vb[j])

						Mu1 = Vbr[i];
						Mu2 = Vbr[j];
						Temp1 = (Mu1 * Mu2) / 16384;
						Mu1 = Vbi[i];
						Mu2 = Vbi[j];
						Temp2 = (Mu1 * Mu2) / 16384;
						Mu1 = Sinv;
						Mu2 = (Temp1 + Temp2);
						Psi_f_Invr[j*Ntap_f+i] += (Mu1 * Mu2) /16384;
						
						Mu1 = Vbr[i];
						Mu2 = Vbi[j];
						Temp1 = (Mu1 * Mu2) / 16384;
						Mu1 = Vbi[i];
						Mu2 = Vbr[j];
						Temp2 = (Mu1 * Mu2) / 16384;
						Mu1 = Sinv;
						Mu2 = (-Temp1 + Temp2);
						Psi_f_Invi[j*Ntap_f+i] += (Mu1 * Mu2) / 16384;
					}
					// Compute rest elements
					Mu1 = Sinv;
					Mu2 = Vbr[i];
					TempI = (Mu1 * Mu2) / 16384;
					Mu2 = Vbi[i];
					TempQ = (Mu1 * Mu2) / 16384;
					// Psi_f_Inv[k*Ntap_f+i] = -Sinv * Vb[i];
					Psi_f_Invr[k*Ntap_f+i] = -TempI;
					Psi_f_Invi[k*Ntap_f+i] = -TempQ;
					// Psi_f_Inv[i*Ntap_f+k] = -Sinv * conj(Vb[i]);
					Psi_f_Invr[i*Ntap_f+k] = -TempI;
					Psi_f_Invi[i*Ntap_f+k] = TempQ;
				}
				// North-West element
				Psi_f_Invr[k*Ntap_f+k] = Sinv;
				Psi_f_Invi[k*Ntap_f+k] = 0;
				// Output medium value of Psi_f_Inv for Extrapolation
				if (k==Nex_f-1) 
				{
					for (i=0; i<Nex_f; i++) 
					{
						for (j=0; j<Nex_f; j++) 
						{
							Psi_f_InvExr[j*Nex_f+i] = Psi_f_Invr[j*Ntap_f+i];
							Psi_f_InvExi[j*Nex_f+i] = Psi_f_Invi[j*Ntap_f+i];
						}
					}
				}
			}

		} // Inverse is completed	
#if 0
		for (i = 0; i < Ntap_f; i++)
			for (j = 0; j < Ntap_f; j++)
				printf("Psi_f_Inv[%d]= (%d,%d)\n", i*Ntap_f + j, Psi_f_Invr[i*Ntap_f + j], Psi_f_Invi[i*Ntap_f + j]);
		printf("\n");
		for (i = 0; i < Nex_f; i++)
			for (j = 0; j < Nex_f; j++)
				printf("Psi_f_InvExr[%d]= (%d,%d)\n", i*Ntap_f + j, Psi_f_InvExr[i*Ntap_f + j], Psi_f_InvExi[i*Ntap_f + j]);
		printf("\n");
#endif		
		// Compute the weight for interpolation filters
		for (n=Ngap_f-1; n>=0; n--) 
		{
			for (i=0; i<Ntap_f; i++) 
			{
				TempI = 0;
				TempQ = 0;
				for (j=0; j<Ntap_f; j++) 
				{
					if (Pin_f[j] < n) 
					{
						// real part
						Mu1 = Rfr[n-Pin_f[j]];
						Mu2 = Psi_f_Invr[i*Ntap_f+j];
						Temp1 = (Mu1 * Mu2) / 16384;
						Mu1 = Rfi[n-Pin_f[j]];
						Mu2 = Psi_f_Invi[i*Ntap_f+j];
						Temp2 = (Mu1 * Mu2) / 16384;
						TempI += Temp1 + Temp2;
						// imag part
						Mu1 = Rfr[n-Pin_f[j]];
						Mu2 = Psi_f_Invi[i*Ntap_f+j];
						Temp1 = (Mu1 * Mu2) / 16384;
						Mu1 = Rfi[n-Pin_f[j]];
						Mu2 = Psi_f_Invr[i*Ntap_f+j];
						Temp2 = (Mu1 * Mu2) / 16384;
						TempQ += Temp1 - Temp2;
					} 
					else 
					{
						// real part
						Mu1 = Rfr[Pin_f[j]-n];
						Mu2 = Psi_f_Invr[i*Ntap_f+j];
						Temp1 = (Mu1 * Mu2) / 16384;
						Mu1 = Rfi[Pin_f[j]-n];
						Mu2 = Psi_f_Invi[i*Ntap_f+j];
						Temp2 = (Mu1 * Mu2) / 16384;
						TempI += Temp1 - Temp2;
						// imag part
						Mu1 = Rfr[Pin_f[j]-n];
						Mu2 = Psi_f_Invi[i*Ntap_f+j];
						Temp1 = (Mu1 * Mu2) / 16384;
						Mu1 = Rfi[Pin_f[j]-n];
						Mu2 = Psi_f_Invr[i*Ntap_f+j];
						Temp2 = (Mu1 * Mu2) / 16384;
						TempQ += Temp1 + Temp2;
					}	
				} 
				TmpI[i*Ngap_f+(Ngap_f-1-n)] = TempI/32;
				TmpQ[i*Ngap_f+(Ngap_f-1-n)] = TempQ/32;
			}
		}
		//change data sequence
		Length=Ntap_f*Ngap_f;
		for (i=0;i<Length;i++)
		{
			Winter_f_i[(3-i%4)*Ntap_f+i/4]=TmpI[i];
			Winter_f_q[(3-i%4)*Ntap_f+i/4]=TmpQ[i];
		}
		// Weight of extrapolation filters
		for (i=0; i<Nex_f; i++) 
		{
			TempI = 0;
			TempQ = 0;
			for (j=0; j<Nex_f; j++) {
				// real part
				Mu1 = Rfr[Pex_f[j]];
				Mu2 = Psi_f_InvExr[i*Nex_f+j];
				Temp1 = (Mu1 * Mu2) / 16384;
				Mu1 = Rfi[Pex_f[j]];
				Mu2 = Psi_f_InvExi[i*Nex_f+j];
				Temp2 = (Mu1 * Mu2) / 16384;
				TempI += Temp1 -Temp2;
				// imag part
				Mu1 = Rfr[Pex_f[j]];
				Mu2 = Psi_f_InvExi[i*Nex_f+j];
				Temp1 = (Mu1 * Mu2) / 16384;
				Mu1 = Rfi[Pex_f[j]];
				Mu2 = Psi_f_InvExr[i*Nex_f+j];
				Temp2 = (Mu1 * Mu2) / 16384;
				TempQ += Temp1 + Temp2;
			}
			Wex_f_i[i] = TempI/32;
			Wex_f_q[i] = TempQ/32;
		}
		
		// Compute FFT of Weight_f [optional]
		// TWeight_f = fft(Weight_f,1<<Nfft2);

		// Compute MSE of FDI
		TempI = 0;
		TempQ = 0;
		for (i=0; i<Ntap_f; i++) 
		{
			// Weight_f[0,4,8,12,16,20,24,28,32,36,40]*conj(Rf[Pin_f[i]])
			if (Pin_f[i] < 0) 
			{
				// real part
				Mu1 = Winter_f_i[i];
				Mu2 = Rfr[-Pin_f[i]];
				Temp1 = (Mu1 * Mu2) / 512;
				Mu1 = Winter_f_q[i];
				Mu2 = Rfi[-Pin_f[i]];
				Temp2 = (Mu1 * Mu2) / 512;
				TempI += Temp1 - Temp2; 
				// imag part
				Mu1 = Winter_f_i[i];
				Mu2 = Rfi[-Pin_f[i]];
				Temp1 = (Mu1 * Mu2) / 512;
				Mu1 = Winter_f_q[i];
				Mu2 = Rfr[-Pin_f[i]];
				Temp2 = (Mu1 * Mu2) / 512;
				TempQ += Temp1 + Temp2;
			} 
			else 
			{
				Mu1 = Winter_f_i[i];
				Mu2 = Rfr[Pin_f[i]];
				Temp1 = (Mu1 * Mu2) / 512;
				Mu1 = Winter_f_q[i];
				Mu2 = Rfi[Pin_f[i]];
				Temp2 = (Mu1 * Mu2) / 512;
				TempI += Temp1 + Temp2;
				Mu1 = Winter_f_i[i];
				Mu2 = Rfi[Pin_f[i]];
				Temp1 = (Mu1 * Mu2) / 512;
				Mu1 = Winter_f_q[i];
				Mu2 = Rfr[Pin_f[i]];
				Temp2 = (Mu1 * Mu2) / 512;
				TempQ += -Temp1 + Temp2;
			}		
		}
		MSEp = Rfr[0] - TempI;

		Mse_f = Max((2*MSEp),163);		
}
