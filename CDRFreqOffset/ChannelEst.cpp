#define EXTERN
#include "Header.h"


const short ScNumTable[3] = { 242, 122, 242 };
const short SymbolNumArray[3] = { 56, 111, 61 };

const short SptPos_m13_m0[22] =
{ 0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 121, 133, 145, 157, 169, 181, 193, 205, 217, 229, 241 };
const short SptPos_m13_m1[20] =
{ 8, 20, 32, 44, 56, 68, 80, 92, 104, 116, 125, 137, 149, 161, 173, 185, 197, 209, 221, 233 };
const short SptPos_m13_m2[20] =
{ 4, 16, 28, 40, 52, 64, 76, 88, 100, 112, 129, 141, 153, 165, 177, 189, 201, 213, 225, 237 };
const short SptPos_m2_m0[12] =
{ 0, 12, 24, 36, 48, 60, 61, 73, 85, 97, 109, 121 };
const short SptPos_m2_m1[10] =
{ 8, 20, 32, 44, 56, 65, 77, 89, 101, 113 };
const short SptPos_m2_m2[10] =
{ 4, 16, 28, 40, 52, 69, 81, 93, 105, 117 };

const short LeftSymbNumArray[3] = { 8, 6, 7 };
const short EndSymbPosArray[3] = { 48, 105, 54 };
const short SptNumTable[3][3] = //Chenyu: pilot tone number
{
	{ 22, 20, 20 },
	{ 12, 10, 10 },
	{ 22, 20, 20 }
};
short BandNum=1;
const short SptMode1Band1_i[62] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1
};
const short SptMode1Band1_q[62] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1
};
const short SptMode2Band1_i[32] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1
};
const short SptMode2Band1_q[32] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1
};
const short SptMode2Band2_i[64] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1

};
const short SptMode2Band2_q[64] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1

};
const short SptMode1Band2_i[124] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1

};
const short SptMode1Band2_q[124] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1

};
const short SptMode1Band3_i[186]=
{
	1  , -1 ,1  ,-1 ,1  ,-1 ,1  ,1  ,-1 ,1  ,-1 ,1  ,1  ,1  ,1  ,1  ,-1 ,-1 ,1  ,1  ,1  ,-1 ,1  ,1  ,1  ,-1 ,-1 ,-1 ,-1 ,1  ,-1 ,1  ,-1 ,1  ,-1 ,-1 ,1  ,1  ,-1 ,1  ,
	1  ,1  ,1  ,1  ,-1 ,-1 ,-1 ,-1 ,1  ,-1 ,1  ,1  ,1  ,-1 ,-1 ,1  ,1  ,-1 ,1  ,1  ,-1 ,1  ,-1 ,-1 ,-1 ,-1 ,-1 ,1  ,-1 ,-1 ,1  ,1  ,-1 ,1  ,1  ,1  ,-1 ,1  ,-1 ,-1 ,
	-1 ,-1 ,1  ,-1 ,1  ,-1 ,1  ,1  ,-1 ,1  ,1  ,-1 ,1  ,1  ,1  ,1  ,-1 ,-1 ,1  ,-1 ,-1 ,1  ,-1 ,1  ,1  ,-1 ,-1 ,-1 ,1  ,-1 ,-1 ,1  ,1  ,-1 ,-1 ,-1 ,1  ,-1 ,1  ,-1 ,
	-1 ,-1 ,-1 ,-1 ,1  ,-1 ,1  ,1  ,1  ,-1 ,1  ,1  ,1  ,-1 ,1  ,1  ,-1 ,1  ,-1 ,1  ,-1 ,1  ,-1 ,1  ,-1 ,-1 ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,1  ,-1 ,-1 ,-1 ,1  ,1  ,1  ,
	1  ,1  ,1  ,-1 ,-1 ,1  ,-1 ,-1 ,1  ,1  ,1  ,1  ,-1 ,-1 ,-1 ,1  ,-1 ,-1 ,-1 ,1  ,1  ,-1 ,-1 ,1  ,-1 ,1 
};

const short SptMode1Band3_q[186] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1,
	-1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1,
	1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1,
	1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1,
	-1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1
};
const short SptMode1Band4_i[248] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1,
	-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1,
	1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1,
	1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1,
	-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1,
	-1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1
};

const short SptMode1Band4_q[248] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1,
	1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1,
	1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1,
	1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1,
	1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1,
	1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1
};

const short SptMode1Band5_i[310] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1,
	-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1,
	1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1,
	1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1,
	-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1,
	-1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1,
	-1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1
};

const short SptMode1Band5_q[310] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1,
	1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1,
	-1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1,
	1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1,
	1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
	1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1,
	-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1,
	-1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1
};
const short SptMode1Band6_i[372] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1,
	-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1,
	1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1,
	1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1,
	-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1,
	-1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1,
	1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1,
	-1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1
};
const short SptMode1Band6_q[372] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1,
	1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1,
	-1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1,
	1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1,
	1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1,
	1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1,
	-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1,
	-1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1,
	-1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1,
	1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1
};
const short SptMode1Band7_i[434] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1,
	-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1,
	1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1,
	1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1,
	-1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1,
	1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1,
	-1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1,
	1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1,
	-1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1,
	1, -1, 1, 1, 1, 1, -1, 1, 1
};
const short SptMode1Band7_q[434] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1,
	-1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1,
	1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1,
	1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1,
	-1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1,
	-1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1,
	1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1,
	-1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1,
	-1, 1
};
const short SptMode1Band8_i[496] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1,
	-1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1,
	1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1,
	1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1,
	1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1,
	1, -1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1,
	-1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1
};
const short SptMode1Band8_q[496] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1,
	1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1,
	1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1,
	-1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1,
	-1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, -1, 1,
	-1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1,
	-1, 1, 1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1
};

const short SptMode2Band3_i[96] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1,
	1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1
};

const short SptMode2Band3_q[96] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1,
	1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1
};
const short SptMode2Band4_i[128] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1,
	-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1,
	1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1
};
const short SptMode2Band4_q[128] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1,
	-1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1,
	-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1
};
const short SptMode2Band5_i[160] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1,
	-1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1,
	-1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1,
	-1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1
};
const short SptMode2Band5_q[160] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1,
	-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1,
	1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1,
	-1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1
};
const short SptMode2Band6_i[192] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1,
	1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1,
	-1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1,
	-1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1
};
const short SptMode2Band6_q[192] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1,
	-1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1,
	1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1,
	1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1,
	-1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1
};
const short SptMode2Band7_i[224] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1,
	-1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1,
	1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1,
	1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1,
	1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1
};
const short SptMode2Band7_q[224] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1,
	1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1,
	-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1,
	-1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1,
	-1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1
};
const short SptMode2Band8_i[256] =
{
	1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1,
	-1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1,
	-1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1,
	1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1,
	-1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1
};
const short SptMode2Band8_q[256] =
{
	-1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1,
	1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1,
	-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1,
	-1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1,
	-1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1,
	1, 1, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1
};

short StartSymbInterTable[3] = { 54, 111, 60 };
short LeftBlkNumTable[3] = { 3, 2, 3 };
short TempBI[Row_h / 2 + 20 + 20][3];
short TempBQ[Row_h / 2 + 20 + 20][3];
int SigPwr;
short End_cnt = 0;

int SignalPower[111] = { 0 };
int NoisePower[111] = { 0 };
short VarFirstFrame = 1;
int NoisePwrSymb[111] = { 0 };
int NoisePwrLastSymb;
short OutEstFlag = 0;
short pwrshift = 4;
enum WORKMODE work_mode;
int coefw = 9;
short mer_tce2[] = { 4023, 1931, -48, -1810 }; 
short mer_tce1[2 * Ngap_t - 1][Ntap_t] = {
		{ 248, 568, 848, 1136, 1296 },
		{ 505, 705, 858, 1010, 1018 },
		{ 770, 834, 858, 882, 753 },
		{ 1042, 970, 850, 753, 481 },
		{ 1315, 1098, 842, 617, 224 }
};
short mer_fce2_i[Nex_f] = { 4331, 1462, -404, -1293 };
short mer_fce2_q[Nex_f] = { -541, -385, 169, 757 };
short mer_fce1[Ntap_f*Ngap_f][2] = {
		{ 502, 137 }, { 980, 128 }, { 1141, -2 }, { 963, -115 }, { 510, -147 },
		{ 307, 89 }, { 864, 145 }, {1131, 32}, {1066, -89}, {727, -178},
		{137, 41}, {743, 155}, {1099, 67}, {1155, -62}, {962, -200},
		{-8, 0}, {613, 143}, {1049, 101}, {1234, -29}, {1209, -214}
};
void ChannelEst(void)
{
	ScNum = ScNumTable[TransMode - 1]; //chenyu: sub carrier num 242,122,242
	SymbolNum = SymbolNumArray[TransMode - 1]; //chenyu: symbol num 56,111,61
	// Forgetting factor = 1-1/2^Lambda
	short Lambda = 3;
	short DF = (TransMode == 1) ? 18 : (TransMode == 2 ? 9 : 17); // DF/pow(2,10)
	int TempPwrN;
	int SymbSpan;
	int SptNum; //chenyu: pilot tone
	int LeftSymb;
	int NoiseI, NoiseQ; // 14-bit
	int NoisePwr; // 28-bit
	int SignalPwr; // 28-bit
	int NoisePwrSum;
	int SignalPwrSum;
	//	int x,y,z;
	//	int Res;
	int SymbolInd;
	int DivStartCnt = 0;
	
	//	short Temp;
	short SptI, SptQ;
	short i;
	short n_blk, n_symb, n_sc, n_spt, n_band, n_tap;
	short CoefInd, SptNum0, SptNum1, ScIndT;
	short Row;

	short Ind0, Ind1, Ind2, SptInd;
	short SymbInd1, SymbInd2, SymbInd3, SymbInd4, SymbInd5;
	short SymbInd, SymbIndH;
	int Temp_i = 0;
	int Temp_q = 0;
	//	int PdpTemp, PwrFactor;
	short StartSymbInter;
	//	short StartSymbPdp;
	//	short SymbNumPdp;

	short Begin_cnt;				//record the symbol num of beginning time direction interpolation
	short NoiseCnt;					//record the time of calculating noise in one symbol

	short Ntap_ex_f = Ntap_f - 1;		//expo spt num in freq direction

	short ScInd;

	short *Winter_t_p = *Winter_t; //chenyu: time domain interpolation coefficient 

	const short *Spt_symb0_p = SptPos_m13_m0; //chenyu: pilot tone position
	const short *Spt_symb1_p = SptPos_m13_m1;
	const short *Spt_symb2_p = SptPos_m13_m2;


	//  short TempBI[Row_h/2+20+20][3];
	//  short TempBQ[Row_h/2+20+20][3];
	//relative spt position coressponding to sc being calculated, when 5 taps, for left band
	short RelSptPos_L[9][5] =
	{
		//symbol 0
		{ -6, -3, 0, 3, 6 },//sub carrier 0
		{ -4, -1, 2, 5, 8 },//sub carrier 4
		{ -5, -2, 1, 4, 7 },//sub carrier 8
		//symbol 1
		{ -7, -4, -1, 2, 5 },
		{ -5, -2, 1, 4, 7 },
		{ -6, -3, 0, 3, 6 },
		//symbol 2
		{ -8, -5, -2, 1, 4 },
		{ -6, -3, 0, 3, 6 },
		{ -7, -4, -1, 2, 5 }
	};

	//relative spt position coressponding to sc being calculated, when 5 taps, for right band
	short RelSptPos_R[9][5] =
	{
		//symbol 0
		{ -6, -3, 0, 3, 6 },//sub carrier 0
		{ -5, -2, 1, 4, 7 },//sub carrier 4
		{ -4, -1, 2, 5, 8 },//sub carrier 8
		//symbol 1
		{ -7, -4, -1, 2, 5 },
		{ -6, -3, 0, 3, 6 },
		{ -5, -2, 1, 4, 7 },
		//symbol 2
		{ -8, -5, -2, 1, 4 },
		{ -7, -4, -1, 2, 5 },
		{ -6, -3, 0, 3, 6 }
	};
	//time direction interpolation coefficient select table for left band
	short CoefSelTableL[3][3] =
	{
		{ 2, 4, 3 },
		{ 1, 3, 2 },
		{ 0, 2, 1 }
	};
	//time direction interpolation coefficient select table for right band
	short CoefSelTableR[3][3] =
	{
		{ 2, 3, 4 },
		{ 1, 2, 3 },
		{ 0, 1, 2 }
	};


	short SideScNum = ScNum / 2;
	short LeftSymbNum = LeftSymbNumArray[TransMode - 1];
	short EndSymbPos = EndSymbPosArray[TransMode - 1];

	short BlkNum = (SymbolNum - LeftSymbNum) / Ngap_t; // Number of blocks in CE->{16,35,18}

	short BlkCnt = 0;
	NoiseVar = 0;
	SigPwr = 0;

	short ConSptNum = (SideScNum - 1) / Ngap_f + 1;			//continued half band spt num,{31,16,31}

	if (work_mode == MER) {
		coefw = 12;
		for (int i = 0; i < Nex_t; i++)
			Wex_t[i] = mer_tce2[i];
		for (int i = 0; i < 2 * Ngap_t - 1; i++)
			for (int j = 0; j < Ntap_t; j++)
				Winter_t[i][j] = mer_tce1[i][j];
		for (int i = 0; i < Nex_f; i++) {
			Wex_f_i[i] = mer_fce2_i[i];
			Wex_f_q[i] = mer_fce2_q[i];
		}		
		for (int i = 0; i < Ngap_f; i++)
			for (int j = 0; j < Ntap_f; j++) {
			Winter_f_i[i*Ntap_f + j] = mer_fce1[i*Ntap_f + j][0];
			Winter_f_q[i*Ntap_f + j] = mer_fce1[i*Ntap_f + j][1];
			}
	}
	else 
	if (work_mode ==SIMULATE) {
		write_tcoef("Weight_T.txt", &Winter_t[0][0], (2 * Ngap_t - 1) * Ngap_t);
		write_tcoef("Weight_exT.txt", Wex_t, Nex_t);
		write_fcoef("Weight_F.txt", Winter_f_i, Winter_f_q, (2 * Ngap_t - 1) * Ntap_f);
		write_fcoef("Weight_exF.txt", Wex_f_i, Wex_f_q, Nex_f);
	}

	switch (TransMode)
	{
	case 1:
		Spt_symb0_p = SptPos_m13_m0;//the first case spt position pointer, 
		Spt_symb1_p = SptPos_m13_m1;//the second case spt position pointer
		Spt_symb2_p = SptPos_m13_m2;//the third case spt position pointer
		SptNum0 = 22;					//spt number of first case spt position
		SptNum1 = 20;					//spt number of second and third case spt position

		break;

	case 2:
		Spt_symb0_p = SptPos_m2_m0;
		Spt_symb1_p = SptPos_m2_m1;
		Spt_symb2_p = SptPos_m2_m2;
		SptNum0 = 12;
		SptNum1 = 10;

		break;

	case 3:
		Spt_symb0_p = SptPos_m13_m0;
		Spt_symb1_p = SptPos_m13_m1;
		Spt_symb2_p = SptPos_m13_m2;
		SptNum0 = 22;
		SptNum1 = 20;

		break;

	default:
		break;
	}

	short *Winter_f_i_p = Winter_f_i;
	short *Winter_f_q_p = Winter_f_q;

	//TODO read IQ



	Begin_cnt = 6;
	End_cnt = 63;

	/////////////////////////

	const short *Spt_pos_p = SptPos_m2_m0; //chenyu: pilot tone position

	const short *Spt_i_p = SptMode1Band1_i; //chenyu: pilot tone coeff
	const short *Spt_q_p = SptMode1Band1_q;



	const short *SptNum_p = *(SptNumTable + TransMode - 1); //chenyu: pilot tone number table, { 22, 20, 20 },

	for (n_symb = 0; n_symb<12; n_symb++)
	{
		SymbolInd = n_symb % 3;
		SptNum = SptNum_p[SymbolInd];

		switch (BandNum)
		{
		case 1:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band1_i;
				Spt_q_p = SptMode2Band1_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode2Band1_i + 12);
					Spt_q_p = (SptMode2Band1_q + 12);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode2Band1_i + 22);
					Spt_q_p = (SptMode2Band1_q + 22);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band1_i;
				Spt_q_p = SptMode1Band1_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode1Band1_i + 22);
					Spt_q_p = (SptMode1Band1_q + 22);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode1Band1_i + 42);
					Spt_q_p = (SptMode1Band1_q + 42);
				}
			}
			break;

		case 2:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band2_i;
				Spt_q_p = SptMode2Band2_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode2Band2_i + 24);
					Spt_q_p = (SptMode2Band2_q + 24);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode2Band2_i + 44);
					Spt_q_p = (SptMode2Band2_q + 44);
				}
			}
			else
			{
				Spt_i_p = SptMode1Band2_i;
				Spt_q_p = SptMode1Band2_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode1Band2_i + 44);
					Spt_q_p = (SptMode1Band2_q + 44);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode1Band2_i + 84);
					Spt_q_p = (SptMode1Band2_q + 84);
				}
			}
			break;

		case 3:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band3_i;
				Spt_q_p = SptMode2Band3_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode2Band3_i + 36);//12*3
					Spt_q_p = (SptMode2Band3_q + 36);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode2Band3_i + 66);//12*3+10*3
					Spt_q_p = (SptMode2Band3_q + 66);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band3_i;
				Spt_q_p = SptMode1Band3_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode1Band3_i + 66);//22*3
					Spt_q_p = (SptMode1Band3_q + 66);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode1Band3_i + 126);//22*3+20*3
					Spt_q_p = (SptMode1Band3_q + 126);
				}
			}
			break;
		case 4:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band4_i;
				Spt_q_p = SptMode2Band4_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode2Band4_i + 48);//12*4
					Spt_q_p = (SptMode2Band4_q + 48);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode2Band4_i + 88);//12*4+10*4
					Spt_q_p = (SptMode2Band4_q + 88);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band4_i;
				Spt_q_p = SptMode1Band4_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode1Band4_i + 88);//22*4
					Spt_q_p = (SptMode1Band4_q + 88);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode1Band4_i + 168);//22*4+20*4
					Spt_q_p = (SptMode1Band4_q + 168);
				}
			}
			break;
		case 5:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band5_i;
				Spt_q_p = SptMode2Band5_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode2Band5_i + 60);//12*5
					Spt_q_p = (SptMode2Band5_i + 60);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode2Band5_i + 110);//12*5+10*5
					Spt_q_p = (SptMode2Band5_q + 110);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band5_i;
				Spt_q_p = SptMode1Band5_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode1Band5_i + 110);//22*5
					Spt_q_p = (SptMode1Band5_q + 110);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode1Band5_i + 210);//22*5+20*5
					Spt_q_p = (SptMode1Band5_q + 210);
				}
			}
			break;
		case 6:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band6_i;
				Spt_q_p = SptMode2Band6_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode2Band6_i + 72);//12*6
					Spt_q_p = (SptMode2Band6_q + 72);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode2Band6_i + 132);//12*6+10*6
					Spt_q_p = (SptMode2Band6_q + 132);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band6_i;
				Spt_q_p = SptMode1Band6_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode1Band6_i + 132);//22*6
					Spt_q_p = (SptMode1Band6_q + 132);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode1Band6_i + 252);//22*6+20*6
					Spt_q_p = (SptMode1Band6_q + 252);
				}
			}
			break;
		case 7:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band7_i;
				Spt_q_p = SptMode2Band7_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode2Band7_i + 84);//12*7
					Spt_q_p = (SptMode2Band7_q + 84);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode2Band7_i + 154);//12*7+10*7
					Spt_q_p = (SptMode2Band7_q + 154);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band7_i;
				Spt_q_p = SptMode1Band7_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode1Band7_i + 154);//22*7
					Spt_q_p = (SptMode1Band7_q + 154);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode1Band7_i + 294);//22*7+20*7
					Spt_q_p = (SptMode1Band7_q + 294);
				}
			}
			break;
		case 8:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band8_i;
				Spt_q_p = SptMode2Band8_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode2Band8_i + 96);//12*8
					Spt_q_p = (SptMode2Band8_q + 96);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode2Band8_i + 176);//12*8+10*8
					Spt_q_p = (SptMode2Band8_q + 176);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band8_i;
				Spt_q_p = SptMode1Band8_q;
				if (SymbolInd == 1)
				{
					Spt_i_p = (SptMode1Band8_i + 176);//22*8
					Spt_q_p = (SptMode1Band8_q + 176);
				}
				else if (SymbolInd == 2)
				{
					Spt_i_p = (SptMode1Band8_i + 336);//22*8+20*8
					Spt_q_p = (SptMode1Band8_q + 336);
				}
			}
			break;
		default:
			break;
			
		}

		if (TransMode == 2)								//transmode 2
		{
			switch (SymbolInd)
			{
			case 0:
				Spt_pos_p = SptPos_m2_m0;
				break;
			case 1:
				Spt_pos_p = SptPos_m2_m1;
				break;
			case 2:
				Spt_pos_p = SptPos_m2_m2;
				break;
			default:
				break;
			}
		}
		else														//transmode 1&3
		{
			switch (SymbolInd)
			{
			case 0:
				Spt_pos_p = SptPos_m13_m0;
				break;
			case 1:
				Spt_pos_p = SptPos_m13_m1;
				break;
			case 2:
				Spt_pos_p = SptPos_m13_m2;
				break;
			default:
				break;
			}
		}
		//¼ÆËã
		if (work_mode==NORMAL)
		{
			for (n_band = 0; n_band<BandNum; n_band++)
			{
				for (n_spt = 0; n_spt<SptNum; n_spt++)
				{
					ScInd = Spt_pos_p[n_spt] + n_band*ScNum;

					SptI = Pmatrix_i[ScInd][n_symb + Begin_cnt] * Spt_i_p[n_spt + n_band*SptNum] + Pmatrix_q[ScInd][n_symb + Begin_cnt] * Spt_q_p[n_spt + n_band*SptNum];
					SptQ = Pmatrix_q[ScInd][n_symb + Begin_cnt] * Spt_i_p[n_spt + n_band*SptNum] - Pmatrix_i[ScInd][n_symb + Begin_cnt] * Spt_q_p[n_spt + n_band*SptNum];

					SptI = SptI / 2;
					SptQ = SptQ / 2;


					Pmatrix_i[ScInd][n_symb + Begin_cnt] = SptI;
					Pmatrix_q[ScInd][n_symb + Begin_cnt] = SptQ;

					SptI = 0;
					SptQ = 0;
				}
			}
		}
	}


	////////Time direction expolation at beginning of subframe

	for (n_band = 0; n_band<BandNum; n_band++)
	{
		//first block symbol
		for (n_spt = 0; n_spt<SptNum0; n_spt++)//symbol 3
		{
			Ind0 = n_band*ScNum + Spt_symb0_p[n_spt];//corresponding to the first case spt position
			//Because it is 4 tap for expo, so here are all 4 multiplication
			Pmatrix_i[Ind0][3] = (Pmatrix_i[Ind0][Ngap_t + 3] * Wex_t[0] + Pmatrix_i[Ind0][2 * Ngap_t + 3] * Wex_t[1] +
				Pmatrix_i[Ind0][3 * Ngap_t + 3] * Wex_t[2] + Pmatrix_i[Ind0][4 * Ngap_t + 3] * Wex_t[3]) >> coefw;
			Pmatrix_q[Ind0][3] = (Pmatrix_q[Ind0][Ngap_t + 3] * Wex_t[0] + Pmatrix_q[Ind0][2 * Ngap_t + 3] * Wex_t[1] +
				Pmatrix_q[Ind0][3 * Ngap_t + 3] * Wex_t[2] + Pmatrix_q[Ind0][4 * Ngap_t + 3] * Wex_t[3]) >> coefw;
		}
#if 0
		printf("%d*%d+%d*%d+%d*%d+%d*%d=%d\n", Pmatrix_i[0][Ngap_t + 3], Wex_t[0], Pmatrix_i[0][2 * Ngap_t + 3], Wex_t[1],
			Pmatrix_i[0][3 * Ngap_t + 3], Wex_t[2], Pmatrix_i[0][4 * Ngap_t + 3],  Wex_t[3], Pmatrix_i[0][3]);
#endif
		for (n_spt = 0; n_spt<SptNum1; n_spt++)//symbol 4&5
		{
			Ind1 = n_band*ScNum + Spt_symb1_p[n_spt];//corresponding to the second case spt position
			Ind2 = n_band*ScNum + Spt_symb2_p[n_spt];//corresponding to the third case spt position
			Pmatrix_i[Ind1][4] = (Pmatrix_i[Ind1][Ngap_t + 4] * Wex_t[0] + Pmatrix_i[Ind1][2 * Ngap_t + 4] * Wex_t[1] +
				Pmatrix_i[Ind1][3 * Ngap_t + 4] * Wex_t[2] + Pmatrix_i[Ind1][4 * Ngap_t + 4] * Wex_t[3]) >> coefw;//symbol 4

			Pmatrix_i[Ind2][5] = (Pmatrix_i[Ind2][Ngap_t + 5] * Wex_t[0] + Pmatrix_i[Ind2][2 * Ngap_t + 5] * Wex_t[1] +
				Pmatrix_i[Ind2][3 * Ngap_t + 5] * Wex_t[2] + Pmatrix_i[Ind2][4 * Ngap_t + 5] * Wex_t[3]) >> coefw;//symbol 5

			Pmatrix_q[Ind1][4] = (Pmatrix_q[Ind1][Ngap_t + 4] * Wex_t[0] + Pmatrix_q[Ind1][2 * Ngap_t + 4] * Wex_t[1] +
				Pmatrix_q[Ind1][3 * Ngap_t + 4] * Wex_t[2] + Pmatrix_q[Ind1][4 * Ngap_t + 4] * Wex_t[3]) >> coefw;//symbol 4

			Pmatrix_q[Ind2][5] = (Pmatrix_q[Ind2][Ngap_t + 5] * Wex_t[0] + Pmatrix_q[Ind2][2 * Ngap_t + 5] * Wex_t[1] +
				Pmatrix_q[Ind2][3 * Ngap_t + 5] * Wex_t[2] + Pmatrix_q[Ind2][4 * Ngap_t + 5] * Wex_t[3]) >> coefw;//symbol 5								  				 
		}
		//second block symbol(need first blocl's result)

		for (n_spt = 0; n_spt<SptNum0; n_spt++)//symbol 0
		{
			Ind0 = n_band*ScNum + Spt_symb0_p[n_spt];
			Pmatrix_i[Ind0][0] = (Pmatrix_i[Ind0][Ngap_t] * Wex_t[0] + Pmatrix_i[Ind0][2 * Ngap_t] * Wex_t[1] +
				Pmatrix_i[Ind0][3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind0][4 * Ngap_t] * Wex_t[3]) >> coefw;
			Pmatrix_q[Ind0][0] = (Pmatrix_q[Ind0][Ngap_t] * Wex_t[0] + Pmatrix_q[Ind0][2 * Ngap_t] * Wex_t[1] +
				Pmatrix_q[Ind0][3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind0][4 * Ngap_t] * Wex_t[3]) >> coefw;
		}
#if 0
		printf("%d*%d+%d*%d+%d*%d+%d*%d=%d\n", Pmatrix_i[0][Ngap_t], Wex_t[0], Pmatrix_i[0][2 * Ngap_t], Wex_t[1],
			Pmatrix_i[0][3 * Ngap_t], Wex_t[2], Pmatrix_i[0][4 * Ngap_t], Wex_t[3], Pmatrix_i[0][0]);
#endif
		for (n_spt = 0; n_spt<SptNum1; n_spt++)//symbol 1&2
		{
			Ind1 = n_band*ScNum + Spt_symb1_p[n_spt];
			Ind2 = n_band*ScNum + Spt_symb2_p[n_spt];
			Pmatrix_i[Ind1][1] = (Pmatrix_i[Ind1][Ngap_t + 1] * Wex_t[0] + Pmatrix_i[Ind1][2 * Ngap_t + 1] * Wex_t[1] +
				Pmatrix_i[Ind1][3 * Ngap_t + 1] * Wex_t[2] + Pmatrix_i[Ind1][4 * Ngap_t + 1] * Wex_t[3]) >> coefw;//symbol 4

			Pmatrix_i[Ind2][2] = (Pmatrix_i[Ind2][Ngap_t + 2] * Wex_t[0] + Pmatrix_i[Ind2][2 * Ngap_t + 2] * Wex_t[1] +
				Pmatrix_i[Ind2][3 * Ngap_t + 2] * Wex_t[2] + Pmatrix_i[Ind2][4 * Ngap_t + 2] * Wex_t[3]) >> coefw;//symbol 5

			Pmatrix_q[Ind1][1] = (Pmatrix_q[Ind1][Ngap_t + 1] * Wex_t[0] + Pmatrix_q[Ind1][2 * Ngap_t + 1] * Wex_t[1] +
				Pmatrix_q[Ind1][3 * Ngap_t + 1] * Wex_t[2] + Pmatrix_q[Ind1][4 * Ngap_t + 1] * Wex_t[3]) >> coefw;//symbol 4

			Pmatrix_q[Ind2][2] = (Pmatrix_q[Ind2][Ngap_t + 2] * Wex_t[0] + Pmatrix_q[Ind2][2 * Ngap_t + 2] * Wex_t[1] +
				Pmatrix_q[Ind2][3 * Ngap_t + 2] * Wex_t[2] + Pmatrix_q[Ind2][4 * Ngap_t + 2] * Wex_t[3]) >> coefw;//symbol 5								  					
		}

	}


	//////////Time direction interpolation and Freq direction expolation & interpolation

	DivStartCnt = 18;//´Ósymbol 18¿ªÊ¼Ñ­»·¼ÆËã3¸ö·ûºÅµÄ¹²éî³Ë·¨

	if ((BandNum<5) || (BandNum == 8))
	{
		SymbSpan = 9;
	}
	else
	{
		SymbSpan = 8;
	}
	if ((BandNum == 6) && (TransMode == 1))
	{

		SymbSpan = 9;
	}
	if ((BandNum == 7) && (TransMode == 2))
	{
		SymbSpan = 10;
	}

	while (BlkCnt<BlkNum)
	{
		if ((End_cnt - Begin_cnt >= SymbSpan) && (Begin_cnt<(EndSymbPos + 6)))
		{


			////////////////////////////////////////¹²éî³Ë
			if (Begin_cnt >= 12)
			{

				for (n_symb = 0; n_symb<3; n_symb++)
				{
					//					if(n_symb==2)
					//					{
					//						n_symb=2;
					//					}
					//SymbolInd=n_symb%3+DivStartCnt;
					SptNum = SptNum_p[n_symb];
					//					if (!OnlyLeft)
					//					{
					switch (BandNum)
					{
					case 1:
						if (TransMode == 2)
						{
							Spt_i_p = SptMode2Band1_i;
							Spt_q_p = SptMode2Band1_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode2Band1_i + 12);
								Spt_q_p = (SptMode2Band1_q + 12);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode2Band1_i + 22);
								Spt_q_p = (SptMode2Band1_q + 22);
							}

						}
						else
						{
							Spt_i_p = SptMode1Band1_i;
							Spt_q_p = SptMode1Band1_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode1Band1_i + 22);
								Spt_q_p = (SptMode1Band1_q + 22);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode1Band1_i + 42);
								Spt_q_p = (SptMode1Band1_q + 42);
							}
						}
						break;

					case 2:
						if (TransMode == 2)
						{
							Spt_i_p = SptMode2Band2_i;
							Spt_q_p = SptMode2Band2_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode2Band2_i + 24);
								Spt_q_p = (SptMode2Band2_q + 24);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode2Band2_i + 44);
								Spt_q_p = (SptMode2Band2_q + 44);
							}
						}
						else
						{
							Spt_i_p = SptMode1Band2_i;
							Spt_q_p = SptMode1Band2_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode1Band2_i + 44);
								Spt_q_p = (SptMode1Band2_q + 44);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode1Band2_i + 84);
								Spt_q_p = (SptMode1Band2_q + 84);
							}
						}
						break;

					case	 3:
						if (TransMode == 2)
						{
							Spt_i_p = SptMode2Band3_i;
							Spt_q_p = SptMode2Band3_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode2Band3_i + 36);//12*3
								Spt_q_p = (SptMode2Band3_q + 36);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode2Band3_i + 66);//12*3+10*3
								Spt_q_p = (SptMode2Band3_q + 66);
							}

						}
						else
						{
							Spt_i_p = SptMode1Band3_i;
							Spt_q_p = SptMode1Band3_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode1Band3_i + 66);//22*3
								Spt_q_p = (SptMode1Band3_q + 66);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode1Band3_i + 126);//22*3+20*3
								Spt_q_p = (SptMode1Band3_q + 126);
							}
						}
						break;
					case 4:
						if (TransMode == 2)
						{
							Spt_i_p = SptMode2Band4_i;
							Spt_q_p = SptMode2Band4_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode2Band4_i + 48);//12*4
								Spt_q_p = (SptMode2Band4_q + 48);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode2Band4_i + 88);//12*4+10*4
								Spt_q_p = (SptMode2Band4_q + 88);
							}

						}
						else
						{
							Spt_i_p = SptMode1Band4_i;
							Spt_q_p = SptMode1Band4_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode1Band4_i + 88);//22*4
								Spt_q_p = (SptMode1Band4_q + 88);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode1Band4_i + 168);//22*4+20*4
								Spt_q_p = (SptMode1Band4_q + 168);
							}
						}
						break;
					case 5:
						if (TransMode == 2)
						{
							Spt_i_p = SptMode2Band5_i;
							Spt_q_p = SptMode2Band5_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode2Band5_i + 60);//12*5
								Spt_q_p = (SptMode2Band5_i + 60);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode2Band5_i + 110);//12*5+10*5
								Spt_q_p = (SptMode2Band5_q + 110);
							}

						}
						else
						{
							Spt_i_p = SptMode1Band5_i;
							Spt_q_p = SptMode1Band5_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode1Band5_i + 110);//22*5
								Spt_q_p = (SptMode1Band5_q + 110);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode1Band5_i + 210);//22*5+20*5
								Spt_q_p = (SptMode1Band5_q + 210);
							}
						}
						break;
					case 6:
						if (TransMode == 2)
						{
							Spt_i_p = SptMode2Band6_i;
							Spt_q_p = SptMode2Band6_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode2Band6_i + 72);//12*6
								Spt_q_p = (SptMode2Band6_q + 72);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode2Band6_i + 132);//12*6+10*6
								Spt_q_p = (SptMode2Band6_q + 132);
							}

						}
						else
						{
							Spt_i_p = SptMode1Band6_i;
							Spt_q_p = SptMode1Band6_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode1Band6_i + 132);//22*6
								Spt_q_p = (SptMode1Band6_q + 132);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode1Band6_i + 252);//22*6+20*6
								Spt_q_p = (SptMode1Band6_q + 252);
							}
						}
						break;
					case 7:
						if (TransMode == 2)
						{
							Spt_i_p = SptMode2Band7_i;
							Spt_q_p = SptMode2Band7_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode2Band7_i + 84);//12*7
								Spt_q_p = (SptMode2Band7_q + 84);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode2Band7_i + 154);//12*7+10*7
								Spt_q_p = (SptMode2Band7_q + 154);
							}

						}
						else
						{
							Spt_i_p = SptMode1Band7_i;
							Spt_q_p = SptMode1Band7_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode1Band7_i + 154);//22*7
								Spt_q_p = (SptMode1Band7_q + 154);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode1Band7_i + 294);//22*7+20*7
								Spt_q_p = (SptMode1Band7_q + 294);
							}
						}
						break;
					case 8:
						if (TransMode == 2)
						{
							Spt_i_p = SptMode2Band8_i;
							Spt_q_p = SptMode2Band8_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode2Band8_i + 96);//12*8
								Spt_q_p = (SptMode2Band8_q + 96);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode2Band8_i + 176);//12*8+10*8
								Spt_q_p = (SptMode2Band8_q + 176);
							}

						}
						else
						{
							Spt_i_p = SptMode1Band8_i;
							Spt_q_p = SptMode1Band8_q;
							if (n_symb == 1)
							{
								Spt_i_p = (SptMode1Band8_i + 176);//22*8
								Spt_q_p = (SptMode1Band8_q + 176);
							}
							else if (n_symb == 2)
							{
								Spt_i_p = (SptMode1Band8_i + 336);//22*8+20*8
								Spt_q_p = (SptMode1Band8_q + 336);
							}
						}
						break;
					default:
						break;

					}
					
					if (TransMode == 2)								//transmode 2
					{
						switch (n_symb)
						{
						case 0:
							Spt_pos_p = SptPos_m2_m0;
							break;
						case 1:
							Spt_pos_p = SptPos_m2_m1;
							break;
						case 2:
							Spt_pos_p = SptPos_m2_m2;
							break;
						default:
							break;
						}
					}
					else														//transmode 1&3
					{
						switch (n_symb)
						{
						case 0:
							Spt_pos_p = SptPos_m13_m0;
							break;
						case 1:
							Spt_pos_p = SptPos_m13_m1;
							break;
						case 2:
							Spt_pos_p = SptPos_m13_m2;
							break;
						default:
							break;
						}
					}


					//					if (BandNum==2)
					if (work_mode==NORMAL)
					for (n_band = 0; n_band<BandNum; n_band++)
					{
						for (n_spt = 0; n_spt<SptNum; n_spt++)
						{
							ScInd = Spt_pos_p[n_spt] + n_band*ScNum;

							//SptI=Pmatrix_i[ScInd][n_symb+DivStartCnt]*Spt_i_p[n_spt]+Pmatrix_q[ScInd][n_symb+DivStartCnt]*Spt_q_p[n_spt];
							//SptQ=Pmatrix_q[ScInd][n_symb+DivStartCnt]*Spt_i_p[n_spt]-Pmatrix_i[ScInd][n_symb+DivStartCnt]*Spt_q_p[n_spt];
							SptI = Pmatrix_i[ScInd][n_symb + DivStartCnt] * Spt_i_p[n_spt + n_band*SptNum] + Pmatrix_q[ScInd][n_symb + DivStartCnt] * Spt_q_p[n_spt + n_band*SptNum];
							SptQ = Pmatrix_q[ScInd][n_symb + DivStartCnt] * Spt_i_p[n_spt + n_band*SptNum] - Pmatrix_i[ScInd][n_symb + DivStartCnt] * Spt_q_p[n_spt + n_band*SptNum];

							SptI = SptI / 2;
							SptQ = SptQ / 2;

							Pmatrix_i[ScInd][n_symb + DivStartCnt] = SptI;
							Pmatrix_q[ScInd][n_symb + DivStartCnt] = SptQ;

							SptI = 0;
							SptQ = 0;
						}
					}
				}
				DivStartCnt = DivStartCnt + 3;
			}
			///////////////////////////////////////////////¹²éî³Ë½áÊø
			//time direction interpolation  

			for (n_symb = 0; n_symb<Ngap_t; n_symb++) //chenyu: handle symbol 1,2,3
			{
				SymbInd = Begin_cnt + n_symb;
				SymbIndH = SymbInd - 6;											//symbol index in Hmatrix

				for (n_band = 0; n_band<BandNum; n_band++)
				{

					for (n_sc = 0; n_sc<ConSptNum; n_sc++) //chenyu: handle one symbol's all subcarrier
					{
						//lower band

						Row = (n_symb % 3) * 3 + n_sc % 3;
						CoefInd = CoefSelTableL[n_symb % 3][n_sc % 3];	//get coeff index
						Winter_t_p = *(Winter_t + CoefInd);				//point to the coefficient to be used

						SymbInd1 = SymbInd + RelSptPos_L[Row][0];
						SymbInd2 = SymbInd + RelSptPos_L[Row][1];
						SymbInd3 = SymbInd + RelSptPos_L[Row][2];
						SymbInd4 = SymbInd + RelSptPos_L[Row][3];
						SymbInd5 = SymbInd + RelSptPos_L[Row][4];

						ScInd = n_band*ScNum + n_sc*Ngap_f;

						Temp_i = Pmatrix_i[ScInd][SymbInd1] * Winter_t_p[0] + Pmatrix_i[ScInd][SymbInd2] * Winter_t_p[1] +
							Pmatrix_i[ScInd][SymbInd3] * Winter_t_p[2] + Pmatrix_i[ScInd][SymbInd4] * Winter_t_p[3] +
							Pmatrix_i[ScInd][SymbInd5] * Winter_t_p[4];

						Temp_q = Pmatrix_q[ScInd][SymbInd1] * Winter_t_p[0] + Pmatrix_q[ScInd][SymbInd2] * Winter_t_p[1] +
							Pmatrix_q[ScInd][SymbInd3] * Winter_t_p[2] + Pmatrix_q[ScInd][SymbInd4] * Winter_t_p[3] +
							Pmatrix_q[ScInd][SymbInd5] * Winter_t_p[4];

						Hmatrix_i[ScInd][SymbIndH] = Temp_i >> coefw;
						Hmatrix_q[ScInd][SymbIndH] = Temp_q >> coefw;

						//upper band
						Row = (n_symb % 3) * 3 + (n_sc + SideScNum - 1) % 3;
						CoefInd = CoefSelTableR[n_symb % 3][(n_sc + SideScNum - 1) % 3];	//get coeff index
						Winter_t_p = *(Winter_t + CoefInd);				//point to the coefficient to be used

						SymbInd1 = SymbInd + RelSptPos_R[Row][0];
						SymbInd2 = SymbInd + RelSptPos_R[Row][1];
						SymbInd3 = SymbInd + RelSptPos_R[Row][2];
						SymbInd4 = SymbInd + RelSptPos_R[Row][3];
						SymbInd5 = SymbInd + RelSptPos_R[Row][4];

						ScInd = n_band*ScNum + n_sc*Ngap_f + SideScNum;

						Temp_i = Pmatrix_i[ScInd][SymbInd1] * Winter_t_p[0] + Pmatrix_i[ScInd][SymbInd2] * Winter_t_p[1] +
							Pmatrix_i[ScInd][SymbInd3] * Winter_t_p[2] + Pmatrix_i[ScInd][SymbInd4] * Winter_t_p[3] +
							Pmatrix_i[ScInd][SymbInd5] * Winter_t_p[4];

						Temp_q = Pmatrix_q[ScInd][SymbInd1] * Winter_t_p[0] + Pmatrix_q[ScInd][SymbInd2] * Winter_t_p[1] +
							Pmatrix_q[ScInd][SymbInd3] * Winter_t_p[2] + Pmatrix_q[ScInd][SymbInd4] * Winter_t_p[3] +
							Pmatrix_q[ScInd][SymbInd5] * Winter_t_p[4];

						Hmatrix_i[ScInd][SymbIndH] = Temp_i >> coefw;
						Hmatrix_q[ScInd][SymbIndH] = Temp_q >> coefw;
					}
				}
			}
#if PRINT_MER_RESULT
			if (work_mode == MER || work_mode == SIMULATE)
				write_result("HestTd.am", Hmatrix_i, Hmatrix_q, Begin_cnt - 6, 3);
#endif
			//freq direction expolation and interpolation

			for (n_symb = 0; n_symb<Ngap_t; n_symb++)
			{

				SymbInd = n_symb + Begin_cnt;
				SymbIndH = SymbInd - 6;

				//copy 1 symbol half band data to temp buffer
				for (n_band = 0; n_band<2 * BandNum; n_band++)//calculate every half band
				{
					for (n_sc = 0; n_sc<SideScNum; n_sc++)
					{
						ScIndT = n_sc + Ngap_f*Nex_f / 2;
						ScInd = n_band*SideScNum + n_sc;
						TempBI[ScIndT][n_symb] = Hmatrix_i[ScInd][SymbIndH];
						TempBQ[ScIndT][n_symb] = Hmatrix_q[ScInd][SymbIndH];
					}

					//expolation					
					//front part
					for (i = 0; i<Ntap_ex_f / 2; i++)								//when 11 tap, calculate 5 symbol expo spt
					{
						Temp_i = 0;
						Temp_q = 0;
						for (n_tap = 0; n_tap<Ntap_ex_f; n_tap++)
						{

							ScIndT = Ngap_f*Ntap_ex_f / 2 - i*Ngap_f + n_tap*Ngap_f;

							Temp_i += TempBI[ScIndT][n_symb] * Wex_f_i[n_tap] + TempBQ[ScIndT][n_symb] * Wex_f_q[n_tap];
							Temp_q += TempBQ[ScIndT][n_symb] * Wex_f_i[n_tap] - TempBI[ScIndT][n_symb] * Wex_f_q[n_tap];
#if 0
							if (n_symb == 0 && BlkCnt == 0) {
								printf("(%d+j%d)*(%d+j%d)+", TempBI[ScIndT][n_symb], TempBQ[ScIndT][n_symb], Wex_f_i[n_tap], Wex_f_q[n_tap]);
							}
#endif
						}
						ScInd = Ngap_f*Ntap_ex_f / 2 - 4 * (i + 1);

						TempBI[ScInd][n_symb] = Temp_i >> coefw;
						TempBQ[ScInd][n_symb] = Temp_q >> coefw;
#if 0
						if (n_symb == 0 && BlkCnt == 0) {
							printf("=(%d+j%d); >>12=(%d+j%d)\n", Temp_i, Temp_q, TempBI[ScInd][n_symb], TempBQ[ScInd][n_symb]);
						}
#endif
					}
					//expolation									
					//end part
					for (i = 0; i<Ntap_ex_f / 2; i++)
					{
						Temp_i = 0;
						Temp_q = 0;
						for (n_tap = 0; n_tap<Ntap_ex_f; n_tap++)
						{

							ScIndT = (SideScNum + Ngap_f*Ntap_ex_f / 2 - 1) + i*Ngap_f - n_tap*Ngap_f;

							Temp_i += TempBI[ScIndT][n_symb] * Wex_f_i[n_tap] - TempBQ[ScIndT][n_symb] * Wex_f_q[n_tap];
							Temp_q += TempBQ[ScIndT][n_symb] * Wex_f_i[n_tap] + TempBI[ScIndT][n_symb] * Wex_f_q[n_tap];
						}
						ScInd = (Ngap_f*Ntap_ex_f / 2 - 1) + SideScNum + 4 * (i + 1);

						TempBI[ScInd][n_symb] = Temp_i >> coefw;
						TempBQ[ScInd][n_symb] = Temp_q >> coefw;
					}

					//interpolation
					for (n_sc = 0; n_sc<SideScNum; n_sc++)
					{
						ScInd = n_band*SideScNum + n_sc;				//positon save to Hmatrix
						Winter_f_i_p = &Winter_f_i[(n_sc % 4)*Ntap_f];  //chenyu: change 4 to Ngap_f
						Winter_f_q_p = &Winter_f_q[(n_sc % 4)*Ntap_f];
						Temp_i = 0;
						Temp_q = 0;
						for (n_tap = 0; n_tap<Ntap_f; n_tap++)
						{
							SptInd = (n_sc / 4)*Ngap_f + Ngap_f*n_tap;				//pick spt

							//							Temp1=TempBI[SptInd][n_symb];
							//							Temp2=Winter_f_i_p[n_tap];
							Temp_i += TempBI[SptInd][n_symb] * Winter_f_i_p[n_tap] +
								TempBQ[SptInd][n_symb] * Winter_f_q_p[n_tap];//pay attention here, maybe wrong, zdx

							Temp_q += TempBQ[SptInd][n_symb] * Winter_f_i_p[n_tap] -
								TempBI[SptInd][n_symb] * Winter_f_q_p[n_tap];
						}
						Hmatrix_i[ScInd][SymbIndH] = (Temp_i >> coefw);
						Hmatrix_q[ScInd][SymbIndH] = (Temp_q >> coefw);
					}

				}
				//OutEstFlag=1;//¼ÆËãÍêµÚÒ»¸ö·ûºÅµÄÐÅµÀ¹À¼Æºó¾Í½«±êÖ¾ÖÃ1£¬¿ÉÒÔ½«ÐÅµÀ¹À¼Æ½á¹ûÊä³ö¸øFPGA
				
				//left band
				NoiseCnt = 0;
				SignalPwrSum = 0;
				NoisePwrSum = 0;
				for (n_sc = 15; n_sc < SideScNum - 15; n_sc++)
				{
					if (((n_symb % 3 == 0) && (n_sc % 12 == 0)) || ((n_symb % 3 == 1) && (n_sc % 12 == 8))
						|| ((n_symb % 3 == 2) && (n_sc % 12 == 4)))
					{
						ScInd = n_sc;
						NoiseI = Pmatrix_i[ScInd][SymbInd] - Hmatrix_i[ScInd][SymbIndH];
						NoiseQ = Pmatrix_q[ScInd][SymbInd] - Hmatrix_q[ScInd][SymbIndH];
						NoisePwr = ((NoiseI*NoiseI) >> pwrshift) + ((NoiseQ*NoiseQ) >> pwrshift);
						SignalPwr = ((Pmatrix_i[ScInd][SymbInd] * Pmatrix_i[ScInd][SymbInd]) >> pwrshift)
							+ ((Pmatrix_q[ScInd][SymbInd] * Pmatrix_q[ScInd][SymbInd]) >> pwrshift);


						NoiseCnt++;
						NoisePwrSum += NoisePwr;
						SignalPwrSum += SignalPwr;
#if 0
						if (BlkCnt == 0 && n_symb == 0) {
							printf("%d:(%d+j%d)-(%d+j%d)=%d\n", n_sc, Pmatrix_i[ScInd][SymbInd], Pmatrix_q[ScInd][SymbInd],
								Hmatrix_i[ScInd][SymbIndH], Hmatrix_q[ScInd][SymbIndH], NoisePwrSum);
						}
#endif
					}
				}

				SignalPwrSum = (SignalPwrSum<268435456) ? SignalPwrSum : (268435456 - 1); // 28-bit
				SignalPower[SymbIndH] = SignalPwrSum / NoiseCnt;
				NoisePwrSum = (NoisePwrSum<268435456) ? NoisePwrSum : (268435456 - 1);
				NoisePower[SymbIndH] = 2 * (NoisePwrSum / NoiseCnt);

				if (VarFirstFrame)
				{
					if (SymbIndH == 0)
					{
						NoisePwrSymb[0] = NoisePower[0]; // initializing
					}
					else
					{
						TempPwrN = NoisePwrSymb[SymbIndH - 1] - (NoisePwrSymb[SymbIndH - 1] >> Lambda); // minus fraction of current value
						NoisePwrSymb[SymbIndH] = TempPwrN + (NoisePower[SymbIndH] >> Lambda); // updating
					}

				}
				else
				{ // otherwise frames

					if (SymbIndH == 0)
					{
						TempPwrN = NoisePwrLastSymb - (NoisePwrLastSymb >> Lambda);
						NoisePwrSymb[SymbIndH] = TempPwrN + (NoisePower[SymbIndH] >> Lambda); // updating
					}
					else
					{
						TempPwrN = NoisePwrSymb[SymbIndH - 1] - (NoisePwrSymb[SymbIndH - 1] >> Lambda); // minus fraction of current value
						NoisePwrSymb[SymbIndH] = TempPwrN + (NoisePower[SymbIndH] >> Lambda); // updating
					}

				}
				// saturation
				NoisePwrSymb[SymbIndH] = (NoisePwrSymb[SymbIndH]<262144) ? NoisePwrSymb[SymbIndH] : (262144 - 1);//×÷ÎªLLRµÄÊäÈë
				NoiseVar += NoisePower[SymbIndH] / 16;
				SigPwr += SignalPower[SymbIndH] / 16;

				OutEstFlag = 1;//¼ÆËãÍêµÚÒ»¸ö·ûºÅµÄÐÅµÀ¹À¼Æºó¾Í½«±êÖ¾ÖÃ1£¬¿ÉÒÔ½«ÐÅµÀ¹À¼Æ½á¹ûÊä³ö¸øFPGA
			}
#if PRINT_MER_RESULT
			if (work_mode == MER || work_mode == SIMULATE)
				write_result("HestFd.am", Hmatrix_i, Hmatrix_q, Begin_cnt - 6, 3);
#endif
			Begin_cnt = Begin_cnt + 3;

			BlkCnt++;

		}

	}
#if PRINT_MER_RESULT
	if (work_mode == MER || work_mode == SIMULATE) {
		write_sn("Npwr.am", NoisePower, StartSymbInterTable[TransMode - 1] - 6);
		write_sn("Spwr.am", SignalPower, StartSymbInterTable[TransMode - 1] - 6);
	}
		
#endif
	if (!OnlyLeft)
	{
		SampleOffsetEst();//called here to guarantee the the sample offset estmate executed over before SPT overwriten by nexe sub frame
	}

	//ÊÕ¹»Ê£ÏÂµÄ·ûºÅ



	///////////////////////////////////////////×öÊ£ÏÂ·ûºÅµÄ¹²éî³ËÔËËã	
	if (TransMode == 1)
		LeftSymb = 2;
	if (TransMode == 3)
		LeftSymb = 1;
	if (TransMode == 2)
		LeftSymb = 0;

	for (n_symb = 0; n_symb<LeftSymb; n_symb++)
	{
		SymbolInd = SymbolNum - LeftSymb + n_symb % 3;
		SptNum = SptNum_p[n_symb];
		//			if (!OnlyLeft)
		//			{	
		switch (BandNum)
		{
		case 1:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band1_i;
				Spt_q_p = SptMode2Band1_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode2Band1_i + 12);
					Spt_q_p = (SptMode2Band1_q + 12);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode2Band1_i + 22);
					Spt_q_p = (SptMode2Band1_q + 22);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band1_i;
				Spt_q_p = SptMode1Band1_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode1Band1_i + 22);
					Spt_q_p = (SptMode1Band1_q + 22);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode1Band1_i + 42);
					Spt_q_p = (SptMode1Band1_q + 42);
				}
			}
			break;

		case 2:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band2_i;
				Spt_q_p = SptMode2Band2_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode2Band2_i + 24);
					Spt_q_p = (SptMode2Band2_q + 24);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode2Band2_i + 44);
					Spt_q_p = (SptMode2Band2_q + 44);
				}
			}
			else
			{
				Spt_i_p = SptMode1Band2_i;
				Spt_q_p = SptMode1Band2_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode1Band2_i + 44);
					Spt_q_p = (SptMode1Band2_q + 44);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode1Band2_i + 84);
					Spt_q_p = (SptMode1Band2_q + 84);
				}
			}
			break;

		case 3:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band3_i;
				Spt_q_p = SptMode2Band3_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode2Band3_i + 36);//12*3
					Spt_q_p = (SptMode2Band3_q + 36);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode2Band3_i + 66);//12*3+10*3
					Spt_q_p = (SptMode2Band3_q + 66);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band3_i;
				Spt_q_p = SptMode1Band3_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode1Band3_i + 66);//22*3
					Spt_q_p = (SptMode1Band3_q + 66);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode1Band3_i + 126);//22*3+20*3
					Spt_q_p = (SptMode1Band3_q + 126);
				}
			}
			break;
		case 4:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band4_i;
				Spt_q_p = SptMode2Band4_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode2Band4_i + 48);//12*4
					Spt_q_p = (SptMode2Band4_q + 48);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode2Band4_i + 88);//12*4+10*4
					Spt_q_p = (SptMode2Band4_q + 88);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band4_i;
				Spt_q_p = SptMode1Band4_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode1Band4_i + 88);//22*4
					Spt_q_p = (SptMode1Band4_q + 88);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode1Band4_i + 168);//22*4+20*4
					Spt_q_p = (SptMode1Band4_q + 168);
				}
			}
			break;
		case 5:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band5_i;
				Spt_q_p = SptMode2Band5_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode2Band5_i + 60);//12*5
					Spt_q_p = (SptMode2Band5_i + 60);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode2Band5_i + 110);//12*5+10*5
					Spt_q_p = (SptMode2Band5_q + 110);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band5_i;
				Spt_q_p = SptMode1Band5_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode1Band5_i + 110);//22*5
					Spt_q_p = (SptMode1Band5_q + 110);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode1Band5_i + 210);//22*5+20*5
					Spt_q_p = (SptMode1Band5_q + 210);
				}
			}
			break;
		case 6:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band6_i;
				Spt_q_p = SptMode2Band6_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode2Band6_i + 72);//12*6
					Spt_q_p = (SptMode2Band6_q + 72);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode2Band6_i + 132);//12*6+10*6
					Spt_q_p = (SptMode2Band6_q + 132);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band6_i;
				Spt_q_p = SptMode1Band6_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode1Band6_i + 132);//22*6
					Spt_q_p = (SptMode1Band6_q + 132);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode1Band6_i + 252);//22*6+20*6
					Spt_q_p = (SptMode1Band6_q + 252);
				}
			}
			break;
		case 7:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band7_i;
				Spt_q_p = SptMode2Band7_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode2Band7_i + 84);//12*7
					Spt_q_p = (SptMode2Band7_q + 84);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode2Band7_i + 154);//12*7+10*7
					Spt_q_p = (SptMode2Band7_q + 154);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band7_i;
				Spt_q_p = SptMode1Band7_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode1Band7_i + 154);//22*7
					Spt_q_p = (SptMode1Band7_q + 154);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode1Band7_i + 294);//22*7+20*7
					Spt_q_p = (SptMode1Band7_q + 294);
				}
			}
			break;
		case 8:
			if (TransMode == 2)
			{
				Spt_i_p = SptMode2Band8_i;
				Spt_q_p = SptMode2Band8_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode2Band8_i + 96);//12*8
					Spt_q_p = (SptMode2Band8_q + 96);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode2Band8_i + 176);//12*8+10*8
					Spt_q_p = (SptMode2Band8_q + 176);
				}

			}
			else
			{
				Spt_i_p = SptMode1Band8_i;
				Spt_q_p = SptMode1Band8_q;
				if (n_symb == 1)
				{
					Spt_i_p = (SptMode1Band8_i + 176);//22*8
					Spt_q_p = (SptMode1Band8_q + 176);
				}
				else if (n_symb == 2)
				{
					Spt_i_p = (SptMode1Band8_i + 336);//22*8+20*8
					Spt_q_p = (SptMode1Band8_q + 336);
				}
			}
			break;
		default:
			break;

		}


		if (TransMode == 2)								//transmode 2
		{
			switch (n_symb)
			{
			case 0:
				Spt_pos_p = SptPos_m2_m0;
				break;
			case 1:
				Spt_pos_p = SptPos_m2_m1;
				break;
			case 2:
				Spt_pos_p = SptPos_m2_m2;
				break;
			default:
				break;
			}
		}
		else														//transmode 1&3
		{
			switch (n_symb)
			{
			case 0:
				Spt_pos_p = SptPos_m13_m0;
				break;
			case 1:
				Spt_pos_p = SptPos_m13_m1;
				break;
			case 2:
				Spt_pos_p = SptPos_m13_m2;
				break;
			default:
				break;
			}
		}
		if (work_mode==NORMAL)
			{
				for (n_band = 0; n_band<BandNum; n_band++)
				{
					for (n_spt = 0; n_spt<SptNum; n_spt++)
					{
						ScInd = Spt_pos_p[n_spt] + n_band*ScNum;

						//SptI=Pmatrix_i[ScInd][SymbolInd+6]*Spt_i_p[n_spt]+Pmatrix_q[ScInd][SymbolInd+6]*Spt_q_p[n_spt];
						//SptQ=Pmatrix_q[ScInd][SymbolInd+6]*Spt_i_p[n_spt]-Pmatrix_i[ScInd][SymbolInd+6]*Spt_q_p[n_spt];
						SptI = Pmatrix_i[ScInd][SymbolInd + 6] * Spt_i_p[n_spt + n_band*SptNum] + Pmatrix_q[ScInd][SymbolInd + 6] * Spt_q_p[n_spt + n_band*SptNum];
						SptQ = Pmatrix_q[ScInd][SymbolInd + 6] * Spt_i_p[n_spt + n_band*SptNum] - Pmatrix_i[ScInd][SymbolInd + 6] * Spt_q_p[n_spt + n_band*SptNum];

						SptI = SptI / 2;
						SptQ = SptQ / 2;

						Pmatrix_i[ScInd][SymbolInd + 6] = SptI;
						Pmatrix_q[ScInd][SymbolInd + 6] = SptQ;

						SptI = 0;
						SptQ = 0;
					}
				}
			}
	}
	///////////////////////////////////////////¹²éî³ËÔËËã½áÊø


	//////////Time direction expolation&interpolation and freq direction interpo&expo at end of subframe	

	//Time direction expo for the rest symbol which are not in one block
	if (TransMode == 1)
	{
		SymbInd = SymbolNum + 6;
		for (n_band = 0; n_band<BandNum; n_band++)
		{
			for (n_spt = 0; n_spt<SptNum1; n_spt++)
			{
				Ind2 = n_band*ScNum + Spt_symb2_p[n_spt];//corresponding to the third case spt position


				Pmatrix_i[Ind2][SymbInd] = (Pmatrix_i[Ind2][SymbInd - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind2][SymbInd - 2 * Ngap_t] * Wex_t[1] +
					Pmatrix_i[Ind2][SymbInd - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind2][SymbInd - 4 * Ngap_t] * Wex_t[3]) >> coefw;
				Pmatrix_q[Ind2][SymbInd] = (Pmatrix_q[Ind2][SymbInd - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind2][SymbInd - 2 * Ngap_t] * Wex_t[1] +
					Pmatrix_q[Ind2][SymbInd - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind2][SymbInd - 4 * Ngap_t] * Wex_t[3]) >> coefw;
			}
		}
	}

	if (TransMode == 3)
	{
		SymbInd1 = SymbolNum + 6;
		SymbInd2 = SymbolNum + 6 + 1;
		for (n_band = 0; n_band<BandNum; n_band++)
		{
			for (n_spt = 0; n_spt<SptNum1; n_spt++)
			{
				Ind1 = n_band*ScNum + Spt_symb1_p[n_spt];//corresponding to the second case spt position
				Ind2 = n_band*ScNum + Spt_symb2_p[n_spt];//corresponding to the third case spt position
				Pmatrix_i[Ind1][SymbInd1] = (Pmatrix_i[Ind1][SymbInd1 - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind1][SymbInd1 - 2 * Ngap_t] * Wex_t[1] +
					Pmatrix_i[Ind1][SymbInd1 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind1][SymbInd1 - 4 * Ngap_t] * Wex_t[3]) >> coefw;

				Pmatrix_q[Ind1][SymbInd1] = (Pmatrix_q[Ind1][SymbInd1 - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind1][SymbInd1 - 2 * Ngap_t] * Wex_t[1] +
					Pmatrix_q[Ind1][SymbInd1 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind1][SymbInd1 - 4 * Ngap_t] * Wex_t[3]) >> coefw;

				Pmatrix_i[Ind2][SymbInd2] = (Pmatrix_i[Ind2][SymbInd2 - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind2][SymbInd2 - 2 * Ngap_t] * Wex_t[1] +
					Pmatrix_i[Ind2][SymbInd2 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind2][SymbInd2 - 4 * Ngap_t] * Wex_t[3]) >> coefw;

				Pmatrix_q[Ind2][SymbInd2] = (Pmatrix_q[Ind2][SymbInd2 - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind2][SymbInd2 - 2 * Ngap_t] * Wex_t[1] +
					Pmatrix_q[Ind2][SymbInd2 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind2][SymbInd2 - 4 * Ngap_t] * Wex_t[3]) >> coefw;
			}
		}
	}

	//the last two block time direction expolation

	short StartSymbExpoTable[3] = { 63, 117, 69 };
	short StartSymbExpo = StartSymbExpoTable[TransMode - 1];

	for (n_band = 0; n_band<BandNum; n_band++)
	{
		//first block symbol
		for (n_spt = 0; n_spt<SptNum0; n_spt++)//symbol 0
		{
			Ind0 = n_band*ScNum + Spt_symb0_p[n_spt];
			Pmatrix_i[Ind0][StartSymbExpo] = (Pmatrix_i[Ind0][StartSymbExpo - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind0][StartSymbExpo - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_i[Ind0][StartSymbExpo - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind0][StartSymbExpo - 4 * Ngap_t] * Wex_t[3]) >> coefw;
			Pmatrix_q[Ind0][StartSymbExpo] = (Pmatrix_q[Ind0][StartSymbExpo - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind0][StartSymbExpo - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_q[Ind0][StartSymbExpo - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind0][StartSymbExpo - 4 * Ngap_t] * Wex_t[3]) >> coefw;
		}
		for (n_spt = 0; n_spt<SptNum1; n_spt++)//symbol 1,2
		{
			Ind1 = n_band*ScNum + Spt_symb1_p[n_spt];//corresponding to the second case spt position
			Ind2 = n_band*ScNum + Spt_symb2_p[n_spt];//corresponding to the third case spt position
			SymbInd1 = StartSymbExpo + 1;
			SymbInd2 = StartSymbExpo + 2;

			Pmatrix_i[Ind1][SymbInd1] = (Pmatrix_i[Ind1][SymbInd1 - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind1][SymbInd1 - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_i[Ind1][SymbInd1 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind1][SymbInd1 - 4 * Ngap_t] * Wex_t[3]) >> coefw;//symbol 1
			Pmatrix_q[Ind1][SymbInd1] = (Pmatrix_q[Ind1][SymbInd1 - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind1][SymbInd1 - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_q[Ind1][SymbInd1 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind1][SymbInd1 - 4 * Ngap_t] * Wex_t[3]) >> coefw;//symbol 1				  				 

			Pmatrix_i[Ind2][SymbInd2] = (Pmatrix_i[Ind2][SymbInd2 - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind2][SymbInd2 - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_i[Ind2][SymbInd2 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind2][SymbInd2 - 4 * Ngap_t] * Wex_t[3]) >> coefw;//symbol 2
			Pmatrix_q[Ind2][SymbInd2] = (Pmatrix_q[Ind2][SymbInd2 - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind2][SymbInd2 - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_q[Ind2][SymbInd2 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind2][SymbInd2 - 4 * Ngap_t] * Wex_t[3]) >> coefw;//symbol 2
		}

		//second block symbol
		for (n_spt = 0; n_spt<SptNum0; n_spt++)//symbol 3
		{
			Ind0 = n_band*ScNum + Spt_symb0_p[n_spt];
			SymbInd = StartSymbExpo + Ngap_t;



			Pmatrix_i[Ind0][SymbInd] = (Pmatrix_i[Ind0][SymbInd - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind0][SymbInd - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_i[Ind0][SymbInd - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind0][SymbInd - 4 * Ngap_t] * Wex_t[3]) >> coefw;
			Pmatrix_q[Ind0][SymbInd] = (Pmatrix_q[Ind0][SymbInd - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind0][SymbInd - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_q[Ind0][SymbInd - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind0][SymbInd - 4 * Ngap_t] * Wex_t[3]) >> coefw;

		}
		for (n_spt = 0; n_spt<SptNum1; n_spt++)//symbol 4,5
		{
			Ind1 = n_band*ScNum + Spt_symb1_p[n_spt];//corresponding to the second case spt position
			Ind2 = n_band*ScNum + Spt_symb2_p[n_spt];//corresponding to the third case spt position
			SymbInd1 = StartSymbExpo + Ngap_t + 1;
			SymbInd2 = StartSymbExpo + Ngap_t + 2;

			Pmatrix_i[Ind1][SymbInd1] = (Pmatrix_i[Ind1][SymbInd1 - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind1][SymbInd1 - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_i[Ind1][SymbInd1 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind1][SymbInd1 - 4 * Ngap_t] * Wex_t[3]) >> coefw;//symbol 1
			Pmatrix_q[Ind1][SymbInd1] = (Pmatrix_q[Ind1][SymbInd1 - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind1][SymbInd1 - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_q[Ind1][SymbInd1 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind1][SymbInd1 - 4 * Ngap_t] * Wex_t[3]) >> coefw;//symbol 1			  				 					 

			Pmatrix_i[Ind2][SymbInd2] = (Pmatrix_i[Ind2][SymbInd2 - Ngap_t] * Wex_t[0] + Pmatrix_i[Ind2][SymbInd2 - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_i[Ind2][SymbInd2 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_i[Ind2][SymbInd2 - 4 * Ngap_t] * Wex_t[3]) >> coefw;//symbol 2		
			Pmatrix_q[Ind2][SymbInd2] = (Pmatrix_q[Ind2][SymbInd2 - Ngap_t] * Wex_t[0] + Pmatrix_q[Ind2][SymbInd2 - 2 * Ngap_t] * Wex_t[1] +
				Pmatrix_q[Ind2][SymbInd2 - 3 * Ngap_t] * Wex_t[2] + Pmatrix_q[Ind2][SymbInd2 - 4 * Ngap_t] * Wex_t[3]) >> coefw;//symbol 2
		}

	}

	//Time direction interpolation for the rest symbol of subframe(two block including expo symbols)


	StartSymbInter = StartSymbInterTable[TransMode - 1];
	short LeftBlkNum = LeftBlkNumTable[TransMode - 1];

	for (n_blk = 0; n_blk<LeftBlkNum; n_blk++)
	{
		for (n_symb = 0; n_symb<Ngap_t; n_symb++)
		{
			SymbInd = StartSymbInter + n_blk*Ngap_t + n_symb;
			SymbIndH = SymbInd - 6;
			for (n_band = 0; n_band<BandNum; n_band++)
			{
				for (n_sc = 0; n_sc<ConSptNum; n_sc++)
				{

					//lower band
					Row = (n_symb % 3) * 3 + n_sc % 3;
					CoefInd = CoefSelTableL[n_symb % 3][n_sc % 3];	//get coeff index
					Winter_t_p = *(Winter_t + CoefInd);				//point to the coefficient to be used
					SymbInd1 = SymbInd + RelSptPos_L[Row][0];
					SymbInd2 = SymbInd + RelSptPos_L[Row][1];
					SymbInd3 = SymbInd + RelSptPos_L[Row][2];
					SymbInd4 = SymbInd + RelSptPos_L[Row][3];
					SymbInd5 = SymbInd + RelSptPos_L[Row][4];

					ScInd = n_band*ScNum + n_sc*Ngap_f;

					Temp_i = Pmatrix_i[ScInd][SymbInd1] * Winter_t_p[0] + Pmatrix_i[ScInd][SymbInd2] * Winter_t_p[1] +
						Pmatrix_i[ScInd][SymbInd3] * Winter_t_p[2] + Pmatrix_i[ScInd][SymbInd4] * Winter_t_p[3] +
						Pmatrix_i[ScInd][SymbInd5] * Winter_t_p[4];

					Temp_q = Pmatrix_q[ScInd][SymbInd1] * Winter_t_p[0] + Pmatrix_q[ScInd][SymbInd2] * Winter_t_p[1] +
						Pmatrix_q[ScInd][SymbInd3] * Winter_t_p[2] + Pmatrix_q[ScInd][SymbInd4] * Winter_t_p[3] +
						Pmatrix_q[ScInd][SymbInd5] * Winter_t_p[4];

					Hmatrix_i[ScInd][SymbIndH] = Temp_i >> coefw;
					Hmatrix_q[ScInd][SymbIndH] = Temp_q >> coefw;



					//upper band
					Row = (n_symb % 3) * 3 + (n_sc + SideScNum - 1) % 3;
					CoefInd = CoefSelTableR[n_symb % 3][(n_sc + SideScNum - 1) % 3];	//get coeff index
					Winter_t_p = *(Winter_t + CoefInd);				//point to the coefficient to be used
					SymbInd1 = SymbInd + RelSptPos_R[Row][0];
					SymbInd2 = SymbInd + RelSptPos_R[Row][1];
					SymbInd3 = SymbInd + RelSptPos_R[Row][2];
					SymbInd4 = SymbInd + RelSptPos_R[Row][3];
					SymbInd5 = SymbInd + RelSptPos_R[Row][4];

					ScInd = n_band*ScNum + n_sc*Ngap_f + SideScNum;

					Temp_i = Pmatrix_i[ScInd][SymbInd1] * Winter_t_p[0] + Pmatrix_i[ScInd][SymbInd2] * Winter_t_p[1] +
						Pmatrix_i[ScInd][SymbInd3] * Winter_t_p[2] + Pmatrix_i[ScInd][SymbInd4] * Winter_t_p[3] +
						Pmatrix_i[ScInd][SymbInd5] * Winter_t_p[4];

					Temp_q = Pmatrix_q[ScInd][SymbInd1] * Winter_t_p[0] + Pmatrix_q[ScInd][SymbInd2] * Winter_t_p[1] +
						Pmatrix_q[ScInd][SymbInd3] * Winter_t_p[2] + Pmatrix_q[ScInd][SymbInd4] * Winter_t_p[3] +
						Pmatrix_q[ScInd][SymbInd5] * Winter_t_p[4];

					Hmatrix_i[ScInd][SymbIndH] = Temp_i >> coefw;
					Hmatrix_q[ScInd][SymbIndH] = Temp_q >> coefw;
				}
			}
		}
	}

#if PRINT_MER_RESULT
	if (work_mode == MER || work_mode == SIMULATE)
		write_result("HestTd.am", Hmatrix_i, Hmatrix_q, StartSymbInter -6, 8);
#endif

	//freq direction expolation and interpolation

	StartSymbInter = StartSymbInterTable[TransMode - 1];

	for (n_blk = 0; n_blk<LeftBlkNum; n_blk++)
	{
		for (n_symb = 0; n_symb<Ngap_t; n_symb++)
		{

			SymbInd = Ngap_t*n_blk + n_symb + StartSymbInter;
			SymbIndH = SymbInd - 6;

			for (n_band = 0; n_band<2 * BandNum; n_band++)//calculate every half band
			{
				//copy 3 symbol half band data to temp buffer
				{
					for (n_sc = 0; n_sc<SideScNum; n_sc++)
					{
						ScIndT = n_sc + Ngap_f*Nex_f / 2;
						ScInd = n_band*SideScNum + n_sc;
						TempBI[ScIndT][n_symb] = Hmatrix_i[ScInd][SymbIndH];
						TempBQ[ScIndT][n_symb] = Hmatrix_q[ScInd][SymbIndH];
					}
				}
				//expolation
				//front part
				for (i = 0; i<Ntap_ex_f / 2; i++)								//when 11 tap, calculate 5 symbol spt
				{
					Temp_i = 0;
					Temp_q = 0;
					for (n_tap = 0; n_tap<Ntap_ex_f; n_tap++)
					{
						//ScIndT=n_band*ScNum+Ngap*Ntap_ex_f/2-i*Ngap_f+n_tap*Ngap_f;
						ScIndT = Ngap_f*Ntap_ex_f / 2 - i*Ngap_f + n_tap*Ngap_f;

						Temp_i += TempBI[ScIndT][n_symb] * Wex_f_i[n_tap] + TempBQ[ScIndT][n_symb] * Wex_f_q[n_tap];
						Temp_q += TempBQ[ScIndT][n_symb] * Wex_f_i[n_tap] - TempBI[ScIndT][n_symb] * Wex_f_q[n_tap];

					}
					ScInd = Ngap_f*Ntap_ex_f / 2 - 4 * (i + 1);

					TempBI[ScInd][n_symb] = Temp_i >> coefw;
					TempBQ[ScInd][n_symb] = Temp_q >> coefw;
				}

				//end part
				for (i = 0; i<Ntap_ex_f / 2; i++)
				{
					Temp_i = 0;
					Temp_q = 0;
					for (n_tap = 0; n_tap<Ntap_ex_f; n_tap++)
					{
						//ScIndT=n_band*ScNum+SideScNum+Ngap*Ntap_ex_f/2+i*Ngap_f-n_tap*Ngap_f;
						ScIndT = (SideScNum + Ngap_f*Ntap_ex_f / 2 - 1) + i*Ngap_f - n_tap*Ngap_f;

						Temp_i += TempBI[ScIndT][n_symb] * Wex_f_i[n_tap] - TempBQ[ScIndT][n_symb] * Wex_f_q[n_tap];
						Temp_q += TempBQ[ScIndT][n_symb] * Wex_f_i[n_tap] + TempBI[ScIndT][n_symb] * Wex_f_q[n_tap];

					}
					ScInd = (Ngap_f*Ntap_ex_f / 2 - 1) + SideScNum + 4 * (i + 1);

					TempBI[ScInd][n_symb] = Temp_i >> coefw;
					TempBQ[ScInd][n_symb] = Temp_q >> coefw;
				}

				//interpolation
				for (n_sc = 0; n_sc<SideScNum; n_sc++)
				{
					ScInd = n_band*SideScNum + n_sc;				//positon save to Hmatrix
					Winter_f_i_p = &Winter_f_i[(n_sc % 4)*Ntap_f];
					Winter_f_q_p = &Winter_f_q[(n_sc % 4)*Ntap_f];

					Temp_i = 0;
					Temp_q = 0;
					for (n_tap = 0; n_tap<Ntap_f; n_tap++)
					{
						SptInd = (n_sc / 4)*Ngap_f + Ngap_f*n_tap;				//pick spt

						Temp_i += TempBI[SptInd][n_symb] * Winter_f_i_p[n_tap] +
							TempBQ[SptInd][n_symb] * Winter_f_q_p[n_tap];//pay attention here, maybe wrong, zdx

						Temp_q += TempBQ[SptInd][n_symb] * Winter_f_i_p[n_tap] -
							TempBI[SptInd][n_symb] * Winter_f_q_p[n_tap];
					}
					Hmatrix_i[ScInd][SymbIndH] = (Temp_i >> coefw);
					Hmatrix_q[ScInd][SymbIndH] = (Temp_q >> coefw);

				}
			} // END BAND

			//left band
			NoiseCnt = 0;
			SignalPwrSum = 0;
			NoisePwrSum = 0;
			for (n_sc = 15; n_sc<SideScNum -15; n_sc++)
			{
				if (((n_symb % 3 == 0) && (n_sc % 12 == 0)) || ((n_symb % 3 == 1) && (n_sc % 12 == 8))
					|| ((n_symb % 3 == 2) && (n_sc % 12 == 4)))
				{
					//						ScInd=n_sc;
					NoiseI = Pmatrix_i[n_sc][SymbInd] - Hmatrix_i[n_sc][SymbIndH];
					NoiseQ = Pmatrix_q[n_sc][SymbInd] - Hmatrix_q[n_sc][SymbIndH];
					NoisePwr = ((NoiseI*NoiseI) >> pwrshift) + ((NoiseQ*NoiseQ) >> pwrshift);
					SignalPwr = ((Pmatrix_i[n_sc][SymbInd] * Pmatrix_i[n_sc][SymbInd]) >> pwrshift)
						+ ((Pmatrix_q[n_sc][SymbInd] * Pmatrix_q[n_sc][SymbInd]) >> pwrshift);


					NoiseCnt++;
					NoisePwrSum += NoisePwr;
					SignalPwrSum += SignalPwr;

				}
			}
			
			SignalPwrSum = (SignalPwrSum<268435456) ? SignalPwrSum : (268435456 - 1); // 28-bit
			SignalPower[SymbIndH] = SignalPwrSum / NoiseCnt;
			NoisePwrSum = (NoisePwrSum<268435456) ? NoisePwrSum : (268435456 - 1);
			NoisePower[SymbIndH] = 2 * (NoisePwrSum / NoiseCnt);


			TempPwrN = NoisePwrSymb[SymbIndH - 1] - (NoisePwrSymb[SymbIndH - 1] >> Lambda); // minus fraction of current value
			NoisePwrSymb[SymbIndH] = TempPwrN + (NoisePower[SymbIndH] >> Lambda); // updating

			// saturation
			NoisePwrSymb[SymbIndH] = (NoisePwrSymb[SymbIndH]<262144) ? NoisePwrSymb[SymbIndH] : (262144 - 1);//×÷ÎªLLRµÄÊäÈë
			NoiseVar += NoisePower[SymbIndH] / 16;
			SigPwr += SignalPower[SymbIndH] / 16;
			//				
		} // END SYMBOL			
	} // END BLOCK
#if PRINT_MER_RESULT
	if (work_mode == MER || work_mode == SIMULATE)
		write_result("HestFd.am", Hmatrix_i, Hmatrix_q, StartSymbInter - 6, 8);
	if (work_mode == MER || work_mode == SIMULATE) {
		write_sn("Npwr.am", NoisePower + StartSymbInterTable[TransMode - 1] - 6, 8);
		write_sn("Spwr.am", SignalPower + StartSymbInterTable[TransMode - 1] - 6, 8);
	}
#endif
	//		
	NoiseVar = (int)(DF*NoiseVar / 1024); // ×÷ÎªÊ±¼ä·½ÏòÂË²¨ÏµÊý¼ÆËãµÄÊäÈë
	SigPwr = (int)(DF*SigPwr / 1024); // ×÷ÎªÊ±¼ä·½ÏòÂË²¨ÏµÊý¼ÆËãµÄÊäÈë

	NoiseVar = (NoiseVar<1048576) ? NoiseVar : (1048576 - 1);
	SigPwr = (SigPwr<1048576) ? SigPwr : (1048576 - 1);

	VarFirstFrame = 0;
	NoisePwrLastSymb = NoisePower[SymbolNum - 1];

}
